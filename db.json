{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/myimage.png","path":"images/myimage.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1551364886798},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1551364886799},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1551364886799},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1551364886800},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1551364886800},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1551364886800},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1551364886800},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1551364886801},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1551364886801},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1551364886801},{"_id":"themes/next/bower.json","hash":"2fd34aa37640c87abb391af760569b7e8d54877a","modified":1551364886802},{"_id":"themes/next/README.md","hash":"0afbf863dc7aac0e88510b3c29dbb6c9d9cde41c","modified":1551364886801},{"_id":"themes/next/_config.yml","hash":"fdc438d84adaa8785b6bde9f96570388f50ffdd1","modified":1553440203164},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1551364886806},{"_id":"themes/next/package.json","hash":"b1a8c06318a8edb227a487906ac7b43a21ed68e6","modified":1551364886821},{"_id":"source/categories/index.md","hash":"b3582ad42b395922b1e9a733e537a56f0d7cbc25","modified":1551515352340},{"_id":"source/_posts/.DS_Store","hash":"6831fde5b01edf21e7c7999c118fe81b19447f23","modified":1551600072257},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"876d7567fc6fd51c20fdf3b1408b2ffa888ba4e7","modified":1551364886799},{"_id":"source/tags/index.md","hash":"a5cd715dfc7d857ac7925c0a124b310fed81931e","modified":1551368494605},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"d5352aa0cfc26c62116d4e4521e802692d789b7a","modified":1551364886799},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1551364886799},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1551364886800},{"_id":"themes/next/docs/DATA-FILES.md","hash":"de63aa8466ee8c4d4b418dfbe4e8f27fa117751d","modified":1551364886802},{"_id":"themes/next/.github/stale.yml","hash":"1bbdd20d025010ec57225712be82988a26485836","modified":1551364886800},{"_id":"themes/next/docs/AUTHORS.md","hash":"b5a343f1a444e544e5ad6d989bc89120edb77e4c","modified":1551364886802},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1551364886802},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"e8819a940009b0d7f275c1bf15d113070760f3b3","modified":1551364886803},{"_id":"themes/next/languages/de.yml","hash":"92964c8ed184fa959a5e2001e7c6d9a07d7a4344","modified":1551364886806},{"_id":"themes/next/languages/en.yml","hash":"df63017548589b2e567647e08d736c2a7f342b12","modified":1551364886807},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1551364886803},{"_id":"themes/next/languages/fr-FR.yml","hash":"6ee34c8103a95839207dac1201fef7a8f727d2fc","modified":1551364886807},{"_id":"themes/next/docs/INSTALLATION.md","hash":"01a383fd1d46752d4b4f22047b535127b44adb75","modified":1551364886803},{"_id":"themes/next/languages/it.yml","hash":"5a8a29d145dd2cd882d52b3fbb1203c1a3540cbd","modified":1551364886807},{"_id":"themes/next/languages/default.yml","hash":"b39706b2d22696eed6b036f4c90aa5362e331090","modified":1551364886806},{"_id":"themes/next/languages/id.yml","hash":"60473cc81a871ceb868c97cd3291d602fda1b338","modified":1551364886807},{"_id":"themes/next/languages/ko.yml","hash":"73253087d7754a0213e2ad72de16ab5138b9ba54","modified":1551364886808},{"_id":"themes/next/languages/ja.yml","hash":"8a3acfb56dc783f261b640dca662c0ec431fea6f","modified":1551364886807},{"_id":"themes/next/languages/pt.yml","hash":"95585897cd108d5ff15e998cd0acdc0fba5d572c","modified":1551364886808},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1551364886808},{"_id":"themes/next/languages/pt-BR.yml","hash":"4d017b7b9542050b87a99931dff98889090fc781","modified":1551364886808},{"_id":"themes/next/languages/zh-Hans.yml","hash":"ce7413e9619d55e794dcab1e914bc7359a3c5568","modified":1551364886809},{"_id":"themes/next/languages/ru.yml","hash":"4ba9f4971115bce0213c437158424428e0e13d5a","modified":1551364886808},{"_id":"themes/next/languages/zh-tw.yml","hash":"280dd00495e90b8a8c4d9351bab8ae65c78bbe87","modified":1551364886809},{"_id":"themes/next/layout/_layout.swig","hash":"5439a2b74de46208b47863d8b01fb4c8dfe3af3c","modified":1551364886810},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1551364886808},{"_id":"themes/next/languages/zh-hk.yml","hash":"54e4aa1d04ccad1e13cf08124fe5f70a930592dd","modified":1551364886809},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1551364886821},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1551364886821},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1551364886821},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1551364886821},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1551364886821},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1551364886822},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1551364886822},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1551364886821},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1551364886821},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1551364886865},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1551364886864},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1551364886865},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551364886846},{"_id":"source/_posts/airflow/faq.md","hash":"d8babd78ca8b45bdf584b4c2f5535bf2bd80a7e5","modified":1569716835300},{"_id":"source/_posts/algorithm/.DS_Store","hash":"bb4f633b8c5f2190e704a6f05a3a5be8218f4dd2","modified":1553697458112},{"_id":"source/_posts/algorithm/shuffle.md","hash":"b75d05c9d53e1e2f8e900e32a2ec2b88a1fb9ea6","modified":1551602341666},{"_id":"source/_posts/leetcode/595_big_coutries.md","hash":"e33688d55712dc5343d31032faf11257a10715d9","modified":1553415807982},{"_id":"source/_posts/leetcode/804_unique_morse_code_words.md","hash":"d34a458a0df87988accf2d050a5c998434af4ebc","modified":1553415267087},{"_id":"source/_posts/leetcode/771_jewels_and_stones.md","hash":"32fd74531d43cbe2a14495a38f880e6b657a67eb","modified":1553096431908},{"_id":"source/_posts/leetcode/709_lower_case.md","hash":"2e01e329e56d7089e4ed0b7e0cfefc41b821d799","modified":1553527462335},{"_id":"source/_posts/leetcode/905_sort_array_by_parity.md","hash":"ff926ace9a457f94064b074364e01af73f4dd7f3","modified":1553698198210},{"_id":"source/_posts/leetcode/961_n-repeated _element.md","hash":"ce4b50a39f0378b5b62810d60d228e6a4726a966","modified":1553439792458},{"_id":"source/_posts/leetcode/977_squares_of_sorted_array.md","hash":"91c2091baeb74af833785a652a3962c1e7b8f497","modified":1553529103198},{"_id":"source/_posts/leetcode/832_flipping_an_image.md","hash":"c39c1d34a991eb26095549766044aaf01a155709","modified":1553700133326},{"_id":"source/_posts/leetcode/929_unique _email_addresses.md","hash":"c1ed25efc1916a3a9024071e4bd098ec2ee73d41","modified":1553183420597},{"_id":"source/_posts/redis/redis-cluster-simple.md","hash":"483afc7b350e9ed40691ac1ada27e9f5f747b602","modified":1553182612081},{"_id":"source/_posts/ssh/ssh_config.md","hash":"6f53d5be6dd6a6ecfc62e9cbeebc062b3384f84c","modified":1567524174727},{"_id":"source/_posts/log/kafka_to_es.md","hash":"6c48f3576a0440297e644cf43a37df9647612a83","modified":1591717714264},{"_id":"themes/next/docs/cn/DATA-FILES.md","hash":"58c58c7d98365395dba904a87f9b5f5e0b1e99cb","modified":1551364886804},{"_id":"themes/next/docs/cn/INSTALLATION.md","hash":"15b09b7cf4e4159858895e37ce334fcc96ac08d7","modified":1551364886804},{"_id":"themes/next/docs/cn/README.md","hash":"0f3768c0db0b48105b989fe77e7c5f486b498a1c","modified":1551364886805},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"1f15b876c106bae74148fb526bc3b914721b8ff2","modified":1551364886805},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"43a70e456d15e9eab3753c22a5253ed2ff300ac8","modified":1551364886805},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"6ce4bd8c4e35c6de9f20cdeffca964232b7ad502","modified":1551364886806},{"_id":"themes/next/docs/ru/README.md","hash":"d97e44ee46f61d3489051359594a53bf43a75cdd","modified":1551364886806},{"_id":"themes/next/docs/cn/UPDATE-FROM-5.1.X.md","hash":"e46a72abf7c08f2637b79e24e35a9dcc5b2b28c0","modified":1551364886805},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1551364886810},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1551364886809},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1551364886810},{"_id":"themes/next/layout/_macro/post.swig","hash":"1b42310d0f4399fc407c8fd1bb76a861b088398a","modified":1551364886811},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1551364886810},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1551364886811},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1551364886811},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1551364886811},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1551364886811},{"_id":"themes/next/layout/_partials/footer.swig","hash":"73835db2ea30a9824f1d90351f975f6011f42d27","modified":1551364886812},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1551364886812},{"_id":"themes/next/layout/_partials/head.swig","hash":"4dd4f0f4c6d8fbf2099419be6adcf7e3b051044d","modified":1551364886812},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1551364886812},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1551364886812},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1551364886813},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1551364886814},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1551364886814},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9f5eb7fad985afefd282006cc3ec01939aa7d2a4","modified":1551364886815},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1551364886818},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1551364886819},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1551364886818},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1551364886819},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1551364886819},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1551364886819},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1551364886819},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1551364886822},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1551364886823},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1551364886823},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1551364886823},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1551364886823},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1551364886823},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1551364886823},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1551364886823},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1551364886823},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1551364886846},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1551364886846},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1551364886846},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1551364886846},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1551364886847},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1551364886847},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1551364886847},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1551364886847},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1551364886848},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1551364886848},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1551364886848},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1551364886848},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1551364886849},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1551364886848},{"_id":"themes/next/source/images/myimage.png","hash":"b99b0c4bdc6a55ccee9fd221024116898ce4f892","modified":1551368113526},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551364886849},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551364886849},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1551364886849},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1551364886849},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1551364886850},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551364886815},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551364886815},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551364886838},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551364886838},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551364886839},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551364886845},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551364886845},{"_id":"source/_posts/algorithm/shuffle/.DS_Store","hash":"3b24dbe08370a3a40ce95d724cbdba315e32d141","modified":1551602313389},{"_id":"source/_posts/algorithm/shuffle/insert.jpg","hash":"c4bb45896414b6fe63c7adae866206e9da6edd68","modified":1551602277112},{"_id":"source/_posts/algorithm/shuffle/swap.jpg","hash":"4b9c6c325248a3e16cd16344f03e851ad41ac8f9","modified":1551601606055},{"_id":"source/_posts/algorithm/shuffle/select.jpg","hash":"cd18df1161ffd0dc9b6c8f52a4e241e356d93070","modified":1551599533368},{"_id":"source/_posts/diary/2019/march.md","hash":"34c8df0aedd0db2643702cc69c065b5b633f1b5b","modified":1553529472553},{"_id":"source/_posts/go/minio/sdk.md","hash":"f0224d13751c82190324b4848919b615c5de504c","modified":1563463569829},{"_id":"source/_posts/go/minio/strings_json.md","hash":"9bf21061187ab3aae4a422e504b9f5e8c76c26fb","modified":1593531317849},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1551364886812},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1551364886812},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1551364886813},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1551364886813},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1551364886813},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1551364886813},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1551364886814},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1551364886814},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1551364886814},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1551364886814},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1551364886814},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1551364886815},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1551364886815},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1551364886815},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1551364886815},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1551364886816},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1551364886816},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1551364886816},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1551364886816},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1551364886816},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1551364886816},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1551364886816},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1551364886816},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1551364886817},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1551364886817},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1551364886817},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1551364886817},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1551364886817},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1551364886818},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1551364886817},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1551364886818},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1551364886818},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1551364886818},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1551364886818},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1551364886820},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1551364886820},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1551364886820},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1551364886820},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1551364886838},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1551364886838},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1551364886838},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1551364886838},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1551364886844},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1551364886845},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1551364886845},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1551364886845},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1551364886850},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1551364886850},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1551364886850},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1551364886850},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1551364886851},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1551364886851},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1551364886851},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1551364886851},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1551364886852},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1551364886853},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1551364886852},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1551364886852},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1551364886853},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1551364886853},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1551364886853},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1551364886853},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1551364886863},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1551364886864},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1551364886864},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1551364886860},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1551364886820},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1551364886820},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1551364886824},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1551364886824},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1551364886824},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1551364886824},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1551364886824},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1551364886827},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1551364886831},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1551364886836},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1551364886837},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1551364886836},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1551364886836},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1551364886837},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1551364886837},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1551364886837},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1551364886839},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1551364886839},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1551364886839},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1551364886840},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1551364886839},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1551364886840},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1551364886840},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1551364886840},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1551364886841},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1551364886841},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1551364886842},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1551364886841},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1551364886841},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1551364886843},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1551364886843},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1551364886843},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1551364886842},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1551364886843},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1551364886843},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1551364886852},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1551364886854},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1551364886854},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1551364886854},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1551364886860},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1551364886861},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551364886858},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551364886859},{"_id":"source/_posts/log/kafka_to_es/connector.jpg","hash":"dc51308e6a4c9e8af35c632bed48d67f2c35f153","modified":1591717476934},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1551364886825},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1551364886825},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1551364886825},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1551364886825},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1551364886825},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1551364886825},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1551364886826},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1551364886826},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1551364886826},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1551364886826},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1551364886826},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1551364886827},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1551364886827},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1551364886827},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1551364886827},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1551364886827},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1551364886828},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1551364886828},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1551364886828},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1551364886828},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"0abb074afb6ab7242a22fa6dc3ac688251df708a","modified":1551364886828},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1551364886828},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1551364886828},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1551364886829},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1551364886829},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1551364886829},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1551364886829},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1551364886829},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1551364886829},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1551364886830},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1551364886830},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1551364886830},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1551364886830},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1551364886830},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1551364886831},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1551364886830},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1551364886831},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1551364886831},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1551364886831},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1551364886832},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1551364886832},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1551364886832},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1551364886832},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1551364886832},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1551364886833},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1551364886833},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1551364886833},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1551364886834},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1551364886833},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1551364886834},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1551364886834},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1551364886834},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1551364886835},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1551364886835},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1551364886835},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1551364886835},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1551364886835},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1551364886836},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1551364886841},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1551364886841},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1551364886842},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1551364886863},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551364886857}],"Category":[{"name":"airflow","_id":"ckcgv2byh0004rlx3cln1923n"},{"name":"算法","_id":"ckcgv2bym0009rlx3y8qbg2sw"},{"name":"leetcode","_id":"ckcgv2byp000erlx3o70lq3sc"},{"name":"leetcode_easy","parent":"ckcgv2byp000erlx3o70lq3sc","_id":"ckcgv2bz10014rlx31b98lyrt"},{"name":"redis","_id":"ckcgv2bz7001rrlx3gg99nzrk"},{"name":"linux","_id":"ckcgv2bz80020rlx3nvc8a668"},{"name":"log","_id":"ckcgv2bz90026rlx354ny749m"},{"name":"MySQL","parent":"ckcgv2bz10014rlx31b98lyrt","_id":"ckcgv2bzb002grlx3529a3fz2"},{"name":"日记","_id":"ckcgv2c12002urlx33u0a9yb8"},{"name":"go","_id":"ckcgv2c13002xrlx3bck7vwlv"},{"name":"go - go基础","_id":"ckcgv2c170031rlx3pu0ftd62"},{"name":"minio","parent":"ckcgv2c13002xrlx3bck7vwlv","_id":"ckcgv2c170033rlx3fajg3gkg"}],"Data":[],"Page":[{"title":"tags","date":"2019-02-28T15:40:52.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-02-28 23:40:52\ntype: \"tags\"\n---\n","updated":"2019-02-28T15:41:34.605Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckcgv2btl0000rlx3qw1m7dn0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-03-02T08:28:37.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-03-02 16:28:37\ntype: \"categories\"\n---\n","updated":"2019-03-02T08:29:12.340Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckcgv2btn0001rlx3bu124aa3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"airflow踩坑集合","_content":"\n常见的算法题目： 把一个列表进行随机排序(打乱原来的排序)。这里不考虑保持原有列表顺序。\n就像我们常见的斗地主的洗牌过程，将54张牌进行打乱，也就是我们说的洗牌算法。\n(选择shuffle, 交换shuffle, 插入shuffle是自己的命名)\n\n\n### 算法一：(选择shuffle)ISHER–YATES SHUFFLE 算法\n\n基本思路：在长度的n的列表，随机选取第k个元素，将第k个元素加入到新列表中，并且在原列表中将第k个元素pop出， 重复前面的操作，直到原列表的长度为1。\n\n![选择洗牌](shuffle/select.jpg)\n\n```python\ndef select_shuffle(nums):\n\n    length = len(nums)\n    if length <= 1:\n        return\n    result = list()\n    while length > 1:\n    \t# 产生一个随机序列 0 < index < length-1\n        index = random.randrange(0, length)\n        # 加入新列表中\n        result.append(nums[index])\n        # 从原表中弹出\n        nums.pop(index)\n        length -= 1\n    # 将新列表的值赋给原列表\n    nums.extend(result)\n```\n时间复杂度：O(n^2), 列表pop操作为O(n)操作\n空间复杂度：O(n)\n\n\n### 算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法\n基本思路：在长度为n的列表，随机选择第k个元素，将第k个元素和第n个元素进行交换，接着再取随机取第j个元素和第n-1元素进行交换，一直循环。\n\n![选择洗牌](shuffle/swap.jpg)\n\n```python\ndef swap_shuffle(nums):\n    length = len(nums)\n    if length <= 1:\n        return\n    while length > 1:\n        index = random.randrange(0, length)\n        nums[index], nums[length-1] = nums[length-1], nums[index]\n        length -= 1\n```\n时间复杂度：O(n)\n空间复杂度：O(1)\n\n\n### 算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法\n基本思路：在长度为n的列表，从前向后遍历，在位置j时(j>1), 随机在[0, j]随机选择第i个元素，然后将第i元素和第j个元素进行交换，一直循环。这种方式看上去就像插入(并不是插入)。\n\n\n![插入洗牌](shuffle/insert.jpg)\n\n```python\ndef insert_shuffle(nums):\n    length = len(nums)\n    if length <= 1:\n        return\n    # 从第2个元素向后遍历\n    start = 1\n    while start < length:\n        index = random.randrange(0, start+1)\n        nums[index], nums[start] = nums[start], nums[index]\n        start += 1\n```\n时间复杂度：O(n)\n空间复杂度：O(1)\n\n","source":"_posts/airflow/faq.md","raw":"---\ntitle: airflow踩坑集合\ntags: \n    - airflow\n    - 任务调度\ncategories:\n\t- airflow\n---\n\n常见的算法题目： 把一个列表进行随机排序(打乱原来的排序)。这里不考虑保持原有列表顺序。\n就像我们常见的斗地主的洗牌过程，将54张牌进行打乱，也就是我们说的洗牌算法。\n(选择shuffle, 交换shuffle, 插入shuffle是自己的命名)\n\n\n### 算法一：(选择shuffle)ISHER–YATES SHUFFLE 算法\n\n基本思路：在长度的n的列表，随机选取第k个元素，将第k个元素加入到新列表中，并且在原列表中将第k个元素pop出， 重复前面的操作，直到原列表的长度为1。\n\n![选择洗牌](shuffle/select.jpg)\n\n```python\ndef select_shuffle(nums):\n\n    length = len(nums)\n    if length <= 1:\n        return\n    result = list()\n    while length > 1:\n    \t# 产生一个随机序列 0 < index < length-1\n        index = random.randrange(0, length)\n        # 加入新列表中\n        result.append(nums[index])\n        # 从原表中弹出\n        nums.pop(index)\n        length -= 1\n    # 将新列表的值赋给原列表\n    nums.extend(result)\n```\n时间复杂度：O(n^2), 列表pop操作为O(n)操作\n空间复杂度：O(n)\n\n\n### 算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法\n基本思路：在长度为n的列表，随机选择第k个元素，将第k个元素和第n个元素进行交换，接着再取随机取第j个元素和第n-1元素进行交换，一直循环。\n\n![选择洗牌](shuffle/swap.jpg)\n\n```python\ndef swap_shuffle(nums):\n    length = len(nums)\n    if length <= 1:\n        return\n    while length > 1:\n        index = random.randrange(0, length)\n        nums[index], nums[length-1] = nums[length-1], nums[index]\n        length -= 1\n```\n时间复杂度：O(n)\n空间复杂度：O(1)\n\n\n### 算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法\n基本思路：在长度为n的列表，从前向后遍历，在位置j时(j>1), 随机在[0, j]随机选择第i个元素，然后将第i元素和第j个元素进行交换，一直循环。这种方式看上去就像插入(并不是插入)。\n\n\n![插入洗牌](shuffle/insert.jpg)\n\n```python\ndef insert_shuffle(nums):\n    length = len(nums)\n    if length <= 1:\n        return\n    # 从第2个元素向后遍历\n    start = 1\n    while start < length:\n        index = random.randrange(0, start+1)\n        nums[index], nums[start] = nums[start], nums[index]\n        start += 1\n```\n时间复杂度：O(n)\n空间复杂度：O(1)\n\n","slug":"airflow/faq","published":1,"date":"2019-09-03T15:24:55.707Z","updated":"2019-09-29T00:27:15.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byc0002rlx3u9ho99dg","content":"<p>常见的算法题目： 把一个列表进行随机排序(打乱原来的排序)。这里不考虑保持原有列表顺序。<br>就像我们常见的斗地主的洗牌过程，将54张牌进行打乱，也就是我们说的洗牌算法。<br>(选择shuffle, 交换shuffle, 插入shuffle是自己的命名)</p>\n<h3 id=\"算法一：-选择shuffle-ISHER–YATES-SHUFFLE-算法\"><a href=\"#算法一：-选择shuffle-ISHER–YATES-SHUFFLE-算法\" class=\"headerlink\" title=\"算法一：(选择shuffle)ISHER–YATES SHUFFLE 算法\"></a>算法一：(选择shuffle)ISHER–YATES SHUFFLE 算法</h3><p>基本思路：在长度的n的列表，随机选取第k个元素，将第k个元素加入到新列表中，并且在原列表中将第k个元素pop出， 重复前面的操作，直到原列表的长度为1。</p>\n<p><img src=\"/2019/09/03/airflow/faq/shuffle/select.jpg\" alt=\"选择洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    result = list()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> length &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">    \t<span class=\"comment\"># 产生一个随机序列 0 &lt; index &lt; length-1</span></span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, length)</span><br><span class=\"line\">        <span class=\"comment\"># 加入新列表中</span></span><br><span class=\"line\">        result.append(nums[index])</span><br><span class=\"line\">        <span class=\"comment\"># 从原表中弹出</span></span><br><span class=\"line\">        nums.pop(index)</span><br><span class=\"line\">        length -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 将新列表的值赋给原列表</span></span><br><span class=\"line\">    nums.extend(result)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n^2), 列表pop操作为O(n)操作<br>空间复杂度：O(n)</p>\n<h3 id=\"算法二：-交换shuffle-KNUTH-DURSTENFELD-SHUFFLE-算法\"><a href=\"#算法二：-交换shuffle-KNUTH-DURSTENFELD-SHUFFLE-算法\" class=\"headerlink\" title=\"算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法\"></a>算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法</h3><p>基本思路：在长度为n的列表，随机选择第k个元素，将第k个元素和第n个元素进行交换，接着再取随机取第j个元素和第n-1元素进行交换，一直循环。</p>\n<p><img src=\"/2019/09/03/airflow/faq/shuffle/swap.jpg\" alt=\"选择洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">swap_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> length &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, length)</span><br><span class=\"line\">        nums[index], nums[length<span class=\"number\">-1</span>] = nums[length<span class=\"number\">-1</span>], nums[index]</span><br><span class=\"line\">        length -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>\n<h3 id=\"算法三：-插入shuffle-INSIDE-OUT-SHUFFLE-算法\"><a href=\"#算法三：-插入shuffle-INSIDE-OUT-SHUFFLE-算法\" class=\"headerlink\" title=\"算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法\"></a>算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法</h3><p>基本思路：在长度为n的列表，从前向后遍历，在位置j时(j&gt;1), 随机在[0, j]随机选择第i个元素，然后将第i元素和第j个元素进行交换，一直循环。这种方式看上去就像插入(并不是插入)。</p>\n<p><img src=\"/2019/09/03/airflow/faq/shuffle/insert.jpg\" alt=\"插入洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 从第2个元素向后遍历</span></span><br><span class=\"line\">    start = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> start &lt; length:</span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, start+<span class=\"number\">1</span>)</span><br><span class=\"line\">        nums[index], nums[start] = nums[start], nums[index]</span><br><span class=\"line\">        start += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>常见的算法题目： 把一个列表进行随机排序(打乱原来的排序)。这里不考虑保持原有列表顺序。<br>就像我们常见的斗地主的洗牌过程，将54张牌进行打乱，也就是我们说的洗牌算法。<br>(选择shuffle, 交换shuffle, 插入shuffle是自己的命名)</p>\n<h3 id=\"算法一：-选择shuffle-ISHER–YATES-SHUFFLE-算法\"><a href=\"#算法一：-选择shuffle-ISHER–YATES-SHUFFLE-算法\" class=\"headerlink\" title=\"算法一：(选择shuffle)ISHER–YATES SHUFFLE 算法\"></a>算法一：(选择shuffle)ISHER–YATES SHUFFLE 算法</h3><p>基本思路：在长度的n的列表，随机选取第k个元素，将第k个元素加入到新列表中，并且在原列表中将第k个元素pop出， 重复前面的操作，直到原列表的长度为1。</p>\n<p><img src=\"/2019/09/03/airflow/faq/shuffle/select.jpg\" alt=\"选择洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    result = list()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> length &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">    \t<span class=\"comment\"># 产生一个随机序列 0 &lt; index &lt; length-1</span></span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, length)</span><br><span class=\"line\">        <span class=\"comment\"># 加入新列表中</span></span><br><span class=\"line\">        result.append(nums[index])</span><br><span class=\"line\">        <span class=\"comment\"># 从原表中弹出</span></span><br><span class=\"line\">        nums.pop(index)</span><br><span class=\"line\">        length -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 将新列表的值赋给原列表</span></span><br><span class=\"line\">    nums.extend(result)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n^2), 列表pop操作为O(n)操作<br>空间复杂度：O(n)</p>\n<h3 id=\"算法二：-交换shuffle-KNUTH-DURSTENFELD-SHUFFLE-算法\"><a href=\"#算法二：-交换shuffle-KNUTH-DURSTENFELD-SHUFFLE-算法\" class=\"headerlink\" title=\"算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法\"></a>算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法</h3><p>基本思路：在长度为n的列表，随机选择第k个元素，将第k个元素和第n个元素进行交换，接着再取随机取第j个元素和第n-1元素进行交换，一直循环。</p>\n<p><img src=\"/2019/09/03/airflow/faq/shuffle/swap.jpg\" alt=\"选择洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">swap_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> length &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, length)</span><br><span class=\"line\">        nums[index], nums[length<span class=\"number\">-1</span>] = nums[length<span class=\"number\">-1</span>], nums[index]</span><br><span class=\"line\">        length -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>\n<h3 id=\"算法三：-插入shuffle-INSIDE-OUT-SHUFFLE-算法\"><a href=\"#算法三：-插入shuffle-INSIDE-OUT-SHUFFLE-算法\" class=\"headerlink\" title=\"算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法\"></a>算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法</h3><p>基本思路：在长度为n的列表，从前向后遍历，在位置j时(j&gt;1), 随机在[0, j]随机选择第i个元素，然后将第i元素和第j个元素进行交换，一直循环。这种方式看上去就像插入(并不是插入)。</p>\n<p><img src=\"/2019/09/03/airflow/faq/shuffle/insert.jpg\" alt=\"插入洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 从第2个元素向后遍历</span></span><br><span class=\"line\">    start = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> start &lt; length:</span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, start+<span class=\"number\">1</span>)</span><br><span class=\"line\">        nums[index], nums[start] = nums[start], nums[index]</span><br><span class=\"line\">        start += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>\n"},{"title":"洗牌算法","_content":"\n常见的算法题目： 把一个列表进行随机排序(打乱原来的排序)。这里不考虑保持原有列表顺序。\n就像我们常见的斗地主的洗牌过程，将54张牌进行打乱，也就是我们说的洗牌算法。\n(选择shuffle, 交换shuffle, 插入shuffle是自己的命名)\n\n\n### 算法一：(选择shuffle)ISHER–YATES SHUFFLE 算法\n基本思路：在长度的n的列表，随机选取第k个元素，将第k个元素加入到新列表中，并且在原列表中将第k个元素pop出， 重复前面的操作，直到原列表的长度为1。\n\n![选择洗牌](shuffle/select.jpg)\n\n```python\ndef select_shuffle(nums):\n\n    length = len(nums)\n    if length <= 1:\n        return\n    result = list()\n    while length > 1:\n    \t# 产生一个随机序列 0 < index < length-1\n        index = random.randrange(0, length)\n        # 加入新列表中\n        result.append(nums[index])\n        # 从原表中弹出\n        nums.pop(index)\n        length -= 1\n    # 将新列表的值赋给原列表\n    nums.extend(result)\n```\n时间复杂度：O(n^2), 列表pop操作为O(n)操作\n空间复杂度：O(n)\n\n\n### 算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法\n基本思路：在长度为n的列表，随机选择第k个元素，将第k个元素和第n个元素进行交换，接着再取随机取第j个元素和第n-1元素进行交换，一直循环。\n\n![选择洗牌](shuffle/swap.jpg)\n\n```python\ndef swap_shuffle(nums):\n    length = len(nums)\n    if length <= 1:\n        return\n    while length > 1:\n        index = random.randrange(0, length)\n        nums[index], nums[length-1] = nums[length-1], nums[index]\n        length -= 1\n```\n时间复杂度：O(n)\n空间复杂度：O(1)\n\n\n### 算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法\n基本思路：在长度为n的列表，从前向后遍历，在位置j时(j>1), 随机在[0, j]随机选择第i个元素，然后将第i元素和第j个元素进行交换，一直循环。这种方式看上去就像插入(并不是插入)。\n\n\n![插入洗牌](shuffle/insert.jpg)\n\n```python\ndef insert_shuffle(nums):\n    length = len(nums)\n    if length <= 1:\n        return\n    # 从第2个元素向后遍历\n    start = 1\n    while start < length:\n        index = random.randrange(0, start+1)\n        nums[index], nums[start] = nums[start], nums[index]\n        start += 1\n```\n时间复杂度：O(n)\n空间复杂度：O(1)\n\n","source":"_posts/algorithm/shuffle.md","raw":"---\ntitle: 洗牌算法\ntags: \n\t- 随机\ncategories:\n\t- 算法\n---\n\n常见的算法题目： 把一个列表进行随机排序(打乱原来的排序)。这里不考虑保持原有列表顺序。\n就像我们常见的斗地主的洗牌过程，将54张牌进行打乱，也就是我们说的洗牌算法。\n(选择shuffle, 交换shuffle, 插入shuffle是自己的命名)\n\n\n### 算法一：(选择shuffle)ISHER–YATES SHUFFLE 算法\n基本思路：在长度的n的列表，随机选取第k个元素，将第k个元素加入到新列表中，并且在原列表中将第k个元素pop出， 重复前面的操作，直到原列表的长度为1。\n\n![选择洗牌](shuffle/select.jpg)\n\n```python\ndef select_shuffle(nums):\n\n    length = len(nums)\n    if length <= 1:\n        return\n    result = list()\n    while length > 1:\n    \t# 产生一个随机序列 0 < index < length-1\n        index = random.randrange(0, length)\n        # 加入新列表中\n        result.append(nums[index])\n        # 从原表中弹出\n        nums.pop(index)\n        length -= 1\n    # 将新列表的值赋给原列表\n    nums.extend(result)\n```\n时间复杂度：O(n^2), 列表pop操作为O(n)操作\n空间复杂度：O(n)\n\n\n### 算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法\n基本思路：在长度为n的列表，随机选择第k个元素，将第k个元素和第n个元素进行交换，接着再取随机取第j个元素和第n-1元素进行交换，一直循环。\n\n![选择洗牌](shuffle/swap.jpg)\n\n```python\ndef swap_shuffle(nums):\n    length = len(nums)\n    if length <= 1:\n        return\n    while length > 1:\n        index = random.randrange(0, length)\n        nums[index], nums[length-1] = nums[length-1], nums[index]\n        length -= 1\n```\n时间复杂度：O(n)\n空间复杂度：O(1)\n\n\n### 算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法\n基本思路：在长度为n的列表，从前向后遍历，在位置j时(j>1), 随机在[0, j]随机选择第i个元素，然后将第i元素和第j个元素进行交换，一直循环。这种方式看上去就像插入(并不是插入)。\n\n\n![插入洗牌](shuffle/insert.jpg)\n\n```python\ndef insert_shuffle(nums):\n    length = len(nums)\n    if length <= 1:\n        return\n    # 从第2个元素向后遍历\n    start = 1\n    while start < length:\n        index = random.randrange(0, start+1)\n        nums[index], nums[start] = nums[start], nums[index]\n        start += 1\n```\n时间复杂度：O(n)\n空间复杂度：O(1)\n\n","slug":"algorithm/shuffle","published":1,"date":"2019-03-02T08:25:45.441Z","updated":"2019-03-03T08:39:01.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byf0003rlx31ohkbtt0","content":"<p>常见的算法题目： 把一个列表进行随机排序(打乱原来的排序)。这里不考虑保持原有列表顺序。<br>就像我们常见的斗地主的洗牌过程，将54张牌进行打乱，也就是我们说的洗牌算法。<br>(选择shuffle, 交换shuffle, 插入shuffle是自己的命名)</p>\n<h3 id=\"算法一：-选择shuffle-ISHER–YATES-SHUFFLE-算法\"><a href=\"#算法一：-选择shuffle-ISHER–YATES-SHUFFLE-算法\" class=\"headerlink\" title=\"算法一：(选择shuffle)ISHER–YATES SHUFFLE 算法\"></a>算法一：(选择shuffle)ISHER–YATES SHUFFLE 算法</h3><p>基本思路：在长度的n的列表，随机选取第k个元素，将第k个元素加入到新列表中，并且在原列表中将第k个元素pop出， 重复前面的操作，直到原列表的长度为1。</p>\n<p><img src=\"/2019/03/02/algorithm/shuffle/select.jpg\" alt=\"选择洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    result = list()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> length &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">    \t<span class=\"comment\"># 产生一个随机序列 0 &lt; index &lt; length-1</span></span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, length)</span><br><span class=\"line\">        <span class=\"comment\"># 加入新列表中</span></span><br><span class=\"line\">        result.append(nums[index])</span><br><span class=\"line\">        <span class=\"comment\"># 从原表中弹出</span></span><br><span class=\"line\">        nums.pop(index)</span><br><span class=\"line\">        length -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 将新列表的值赋给原列表</span></span><br><span class=\"line\">    nums.extend(result)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n^2), 列表pop操作为O(n)操作<br>空间复杂度：O(n)</p>\n<h3 id=\"算法二：-交换shuffle-KNUTH-DURSTENFELD-SHUFFLE-算法\"><a href=\"#算法二：-交换shuffle-KNUTH-DURSTENFELD-SHUFFLE-算法\" class=\"headerlink\" title=\"算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法\"></a>算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法</h3><p>基本思路：在长度为n的列表，随机选择第k个元素，将第k个元素和第n个元素进行交换，接着再取随机取第j个元素和第n-1元素进行交换，一直循环。</p>\n<p><img src=\"/2019/03/02/algorithm/shuffle/swap.jpg\" alt=\"选择洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">swap_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> length &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, length)</span><br><span class=\"line\">        nums[index], nums[length<span class=\"number\">-1</span>] = nums[length<span class=\"number\">-1</span>], nums[index]</span><br><span class=\"line\">        length -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>\n<h3 id=\"算法三：-插入shuffle-INSIDE-OUT-SHUFFLE-算法\"><a href=\"#算法三：-插入shuffle-INSIDE-OUT-SHUFFLE-算法\" class=\"headerlink\" title=\"算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法\"></a>算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法</h3><p>基本思路：在长度为n的列表，从前向后遍历，在位置j时(j&gt;1), 随机在[0, j]随机选择第i个元素，然后将第i元素和第j个元素进行交换，一直循环。这种方式看上去就像插入(并不是插入)。</p>\n<p><img src=\"/2019/03/02/algorithm/shuffle/insert.jpg\" alt=\"插入洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 从第2个元素向后遍历</span></span><br><span class=\"line\">    start = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> start &lt; length:</span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, start+<span class=\"number\">1</span>)</span><br><span class=\"line\">        nums[index], nums[start] = nums[start], nums[index]</span><br><span class=\"line\">        start += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>常见的算法题目： 把一个列表进行随机排序(打乱原来的排序)。这里不考虑保持原有列表顺序。<br>就像我们常见的斗地主的洗牌过程，将54张牌进行打乱，也就是我们说的洗牌算法。<br>(选择shuffle, 交换shuffle, 插入shuffle是自己的命名)</p>\n<h3 id=\"算法一：-选择shuffle-ISHER–YATES-SHUFFLE-算法\"><a href=\"#算法一：-选择shuffle-ISHER–YATES-SHUFFLE-算法\" class=\"headerlink\" title=\"算法一：(选择shuffle)ISHER–YATES SHUFFLE 算法\"></a>算法一：(选择shuffle)ISHER–YATES SHUFFLE 算法</h3><p>基本思路：在长度的n的列表，随机选取第k个元素，将第k个元素加入到新列表中，并且在原列表中将第k个元素pop出， 重复前面的操作，直到原列表的长度为1。</p>\n<p><img src=\"/2019/03/02/algorithm/shuffle/select.jpg\" alt=\"选择洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    result = list()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> length &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">    \t<span class=\"comment\"># 产生一个随机序列 0 &lt; index &lt; length-1</span></span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, length)</span><br><span class=\"line\">        <span class=\"comment\"># 加入新列表中</span></span><br><span class=\"line\">        result.append(nums[index])</span><br><span class=\"line\">        <span class=\"comment\"># 从原表中弹出</span></span><br><span class=\"line\">        nums.pop(index)</span><br><span class=\"line\">        length -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 将新列表的值赋给原列表</span></span><br><span class=\"line\">    nums.extend(result)</span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n^2), 列表pop操作为O(n)操作<br>空间复杂度：O(n)</p>\n<h3 id=\"算法二：-交换shuffle-KNUTH-DURSTENFELD-SHUFFLE-算法\"><a href=\"#算法二：-交换shuffle-KNUTH-DURSTENFELD-SHUFFLE-算法\" class=\"headerlink\" title=\"算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法\"></a>算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法</h3><p>基本思路：在长度为n的列表，随机选择第k个元素，将第k个元素和第n个元素进行交换，接着再取随机取第j个元素和第n-1元素进行交换，一直循环。</p>\n<p><img src=\"/2019/03/02/algorithm/shuffle/swap.jpg\" alt=\"选择洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">swap_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> length &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, length)</span><br><span class=\"line\">        nums[index], nums[length<span class=\"number\">-1</span>] = nums[length<span class=\"number\">-1</span>], nums[index]</span><br><span class=\"line\">        length -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>\n<h3 id=\"算法三：-插入shuffle-INSIDE-OUT-SHUFFLE-算法\"><a href=\"#算法三：-插入shuffle-INSIDE-OUT-SHUFFLE-算法\" class=\"headerlink\" title=\"算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法\"></a>算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法</h3><p>基本思路：在长度为n的列表，从前向后遍历，在位置j时(j&gt;1), 随机在[0, j]随机选择第i个元素，然后将第i元素和第j个元素进行交换，一直循环。这种方式看上去就像插入(并不是插入)。</p>\n<p><img src=\"/2019/03/02/algorithm/shuffle/insert.jpg\" alt=\"插入洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 从第2个元素向后遍历</span></span><br><span class=\"line\">    start = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> start &lt; length:</span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, start+<span class=\"number\">1</span>)</span><br><span class=\"line\">        nums[index], nums[start] = nums[start], nums[index]</span><br><span class=\"line\">        start += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>\n"},{"title":"leetcode第595题：大国家","_content":"\n###### leetcode第595题：大国家\n\n找出MySQL world表中的大国家，领土大于3百万平方公里或者人口大于2.5千万.\n\n```python\n\"\"\"\nThere is a table World\n\n+-----------------+------------+------------+--------------+---------------+\n| name            | continent  | area       | population   | gdp           |\n+-----------------+------------+------------+--------------+---------------+\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\n+-----------------+------------+------------+--------------+---------------+\n\nA country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\nWrite a SQL solution to output big countries' name, population and area.\nFor example, according to the above table, we should output:\n\"\"\"\n```\n\n\n```mysql\n# Write your MySQL query statement below\n\nSELECT name, population, area\nFROM world\nWHERE area > 3000000 or population > 25000000;\n```\n","source":"_posts/leetcode/595_big_coutries.md","raw":"---\ntitle: leetcode第595题：大国家\ntags:\n\t- leetcode\n\t- MySQL\ncategories:\n\t- leetcode\n\t- leetcode_easy\n\t- MySQL\n---\n\n###### leetcode第595题：大国家\n\n找出MySQL world表中的大国家，领土大于3百万平方公里或者人口大于2.5千万.\n\n```python\n\"\"\"\nThere is a table World\n\n+-----------------+------------+------------+--------------+---------------+\n| name            | continent  | area       | population   | gdp           |\n+-----------------+------------+------------+--------------+---------------+\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\n+-----------------+------------+------------+--------------+---------------+\n\nA country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\nWrite a SQL solution to output big countries' name, population and area.\nFor example, according to the above table, we should output:\n\"\"\"\n```\n\n\n```mysql\n# Write your MySQL query statement below\n\nSELECT name, population, area\nFROM world\nWHERE area > 3000000 or population > 25000000;\n```\n","slug":"leetcode/595_big_coutries","published":1,"date":"2019-03-24T08:19:46.295Z","updated":"2019-03-24T08:23:27.982Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byi0006rlx3wii7qqyw","content":"<h6 id=\"leetcode第595题：大国家\"><a href=\"#leetcode第595题：大国家\" class=\"headerlink\" title=\"leetcode第595题：大国家\"></a>leetcode第595题：大国家</h6><p>找出MySQL world表中的大国家，领土大于3百万平方公里或者人口大于2.5千万.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">There is a table World</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">+-----------------+------------+------------+--------------+---------------+</span></span><br><span class=\"line\"><span class=\"string\">| name            | continent  | area       | population   | gdp           |</span></span><br><span class=\"line\"><span class=\"string\">+-----------------+------------+------------+--------------+---------------+</span></span><br><span class=\"line\"><span class=\"string\">| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |</span></span><br><span class=\"line\"><span class=\"string\">| Albania         | Europe     | 28748      | 2831741      | 12960000      |</span></span><br><span class=\"line\"><span class=\"string\">| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |</span></span><br><span class=\"line\"><span class=\"string\">| Andorra         | Europe     | 468        | 78115        | 3712000       |</span></span><br><span class=\"line\"><span class=\"string\">| Angola          | Africa     | 1246700    | 20609294     | 100990000     |</span></span><br><span class=\"line\"><span class=\"string\">+-----------------+------------+------------+--------------+---------------+</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.</span></span><br><span class=\"line\"><span class=\"string\">Write a SQL solution to output big countries' name, population and area.</span></span><br><span class=\"line\"><span class=\"string\">For example, according to the above table, we should output:</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Write your MySQL query statement below</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT name, population, area</span><br><span class=\"line\">FROM world</span><br><span class=\"line\">WHERE area &gt; 3000000 or population &gt; 25000000;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"leetcode第595题：大国家\"><a href=\"#leetcode第595题：大国家\" class=\"headerlink\" title=\"leetcode第595题：大国家\"></a>leetcode第595题：大国家</h6><p>找出MySQL world表中的大国家，领土大于3百万平方公里或者人口大于2.5千万.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">There is a table World</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">+-----------------+------------+------------+--------------+---------------+</span></span><br><span class=\"line\"><span class=\"string\">| name            | continent  | area       | population   | gdp           |</span></span><br><span class=\"line\"><span class=\"string\">+-----------------+------------+------------+--------------+---------------+</span></span><br><span class=\"line\"><span class=\"string\">| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |</span></span><br><span class=\"line\"><span class=\"string\">| Albania         | Europe     | 28748      | 2831741      | 12960000      |</span></span><br><span class=\"line\"><span class=\"string\">| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |</span></span><br><span class=\"line\"><span class=\"string\">| Andorra         | Europe     | 468        | 78115        | 3712000       |</span></span><br><span class=\"line\"><span class=\"string\">| Angola          | Africa     | 1246700    | 20609294     | 100990000     |</span></span><br><span class=\"line\"><span class=\"string\">+-----------------+------------+------------+--------------+---------------+</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.</span></span><br><span class=\"line\"><span class=\"string\">Write a SQL solution to output big countries' name, population and area.</span></span><br><span class=\"line\"><span class=\"string\">For example, according to the above table, we should output:</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Write your MySQL query statement below</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT name, population, area</span><br><span class=\"line\">FROM world</span><br><span class=\"line\">WHERE area &gt; 3000000 or population &gt; 25000000;</span><br></pre></td></tr></table></figure>\n"},{"title":"leetcode第804题：唯一的摩斯电码","_content":"\n###### leetcode第804题：唯一的摩斯电码\n\n给出小写字母对应的摩斯码，输入一个字符串列表，得到字符串列表对应的摩斯码，输出这个不重复的摩斯码的数量\n\t1. 其中字符串的列表最多有100个字符串\n\t2. 每个字符串有1-12个字符\n\t3. 所有字符都是小写字母\n\n\n```python\n\"\"\"\nInternational Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: \"a\" maps to \".-\", \"b\" maps to \"-...\", \"c\" maps to \"-.-.\", and so on.\n\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\n\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\nNow, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We'll call such a concatenation, the transformation of a word.\n\nReturn the number of different transformations among all words we have.\n\nExample:\nInput: words = [\"gin\", \"zen\", \"gig\", \"msg\"]\nOutput: 2\nExplanation: \nThe transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\n\nThere are 2 different transformations, \"--...-.\" and \"--...--.\".\nNote:\n\nThe length of words will be at most 100.\nEach words[i] will have length in range [1, 12].\nwords[i] will only consist of lowercase letters.\n\n\"\"\"\n\nclass Solution:\n\t# 题目比较简单，不做解释\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\n        table = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n        result = set()\n        \n        for word in words:\n            string = ''\n            for char in word:\n                string += table[ord(char)-97]\n            \n            result.add(string)\n            \n        return len(result)\n                \n        \n\n```","source":"_posts/leetcode/804_unique_morse_code_words.md","raw":"---\ntitle: leetcode第804题：唯一的摩斯电码\ntags:\n\t- leetcode\n\ncategories:\n\t- leetcode\n\t- leetcode_easy\n---\n\n###### leetcode第804题：唯一的摩斯电码\n\n给出小写字母对应的摩斯码，输入一个字符串列表，得到字符串列表对应的摩斯码，输出这个不重复的摩斯码的数量\n\t1. 其中字符串的列表最多有100个字符串\n\t2. 每个字符串有1-12个字符\n\t3. 所有字符都是小写字母\n\n\n```python\n\"\"\"\nInternational Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: \"a\" maps to \".-\", \"b\" maps to \"-...\", \"c\" maps to \"-.-.\", and so on.\n\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\n\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\nNow, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We'll call such a concatenation, the transformation of a word.\n\nReturn the number of different transformations among all words we have.\n\nExample:\nInput: words = [\"gin\", \"zen\", \"gig\", \"msg\"]\nOutput: 2\nExplanation: \nThe transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\n\nThere are 2 different transformations, \"--...-.\" and \"--...--.\".\nNote:\n\nThe length of words will be at most 100.\nEach words[i] will have length in range [1, 12].\nwords[i] will only consist of lowercase letters.\n\n\"\"\"\n\nclass Solution:\n\t# 题目比较简单，不做解释\n    def uniqueMorseRepresentations(self, words: List[str]) -> int:\n        table = [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n        result = set()\n        \n        for word in words:\n            string = ''\n            for char in word:\n                string += table[ord(char)-97]\n            \n            result.add(string)\n            \n        return len(result)\n                \n        \n\n```","slug":"leetcode/804_unique_morse_code_words","published":1,"date":"2019-03-24T08:08:35.640Z","updated":"2019-03-24T08:14:27.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byk0007rlx3jun0oo0v","content":"<h6 id=\"leetcode第804题：唯一的摩斯电码\"><a href=\"#leetcode第804题：唯一的摩斯电码\" class=\"headerlink\" title=\"leetcode第804题：唯一的摩斯电码\"></a>leetcode第804题：唯一的摩斯电码</h6><p>给出小写字母对应的摩斯码，输入一个字符串列表，得到字符串列表对应的摩斯码，输出这个不重复的摩斯码的数量</p>\n<pre><code>1. 其中字符串的列表最多有100个字符串\n2. 每个字符串有1-12个字符\n3. 所有字符都是小写字母\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: \"a\" maps to \".-\", \"b\" maps to \"-...\", \"c\" maps to \"-.-.\", and so on.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">For convenience, the full table for the 26 letters of the English alphabet is given below:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]</span></span><br><span class=\"line\"><span class=\"string\">Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We'll call such a concatenation, the transformation of a word.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Return the number of different transformations among all words we have.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example:</span></span><br><span class=\"line\"><span class=\"string\">Input: words = [\"gin\", \"zen\", \"gig\", \"msg\"]</span></span><br><span class=\"line\"><span class=\"string\">Output: 2</span></span><br><span class=\"line\"><span class=\"string\">Explanation: </span></span><br><span class=\"line\"><span class=\"string\">The transformation of each word is:</span></span><br><span class=\"line\"><span class=\"string\">\"gin\" -&gt; \"--...-.\"</span></span><br><span class=\"line\"><span class=\"string\">\"zen\" -&gt; \"--...-.\"</span></span><br><span class=\"line\"><span class=\"string\">\"gig\" -&gt; \"--...--.\"</span></span><br><span class=\"line\"><span class=\"string\">\"msg\" -&gt; \"--...--.\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">There are 2 different transformations, \"--...-.\" and \"--...--.\".</span></span><br><span class=\"line\"><span class=\"string\">Note:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The length of words will be at most 100.</span></span><br><span class=\"line\"><span class=\"string\">Each words[i] will have length in range [1, 12].</span></span><br><span class=\"line\"><span class=\"string\">words[i] will only consist of lowercase letters.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># 题目比较简单，不做解释</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">uniqueMorseRepresentations</span><span class=\"params\">(self, words: List[str])</span> -&gt; int:</span></span><br><span class=\"line\">        table = [<span class=\"string\">\".-\"</span>,<span class=\"string\">\"-...\"</span>,<span class=\"string\">\"-.-.\"</span>,<span class=\"string\">\"-..\"</span>,<span class=\"string\">\".\"</span>,<span class=\"string\">\"..-.\"</span>,<span class=\"string\">\"--.\"</span>,<span class=\"string\">\"....\"</span>,<span class=\"string\">\"..\"</span>,<span class=\"string\">\".---\"</span>,<span class=\"string\">\"-.-\"</span>,<span class=\"string\">\".-..\"</span>,<span class=\"string\">\"--\"</span>,<span class=\"string\">\"-.\"</span>,<span class=\"string\">\"---\"</span>,<span class=\"string\">\".--.\"</span>,<span class=\"string\">\"--.-\"</span>,<span class=\"string\">\".-.\"</span>,<span class=\"string\">\"...\"</span>,<span class=\"string\">\"-\"</span>,<span class=\"string\">\"..-\"</span>,<span class=\"string\">\"...-\"</span>,<span class=\"string\">\".--\"</span>,<span class=\"string\">\"-..-\"</span>,<span class=\"string\">\"-.--\"</span>,<span class=\"string\">\"--..\"</span>]</span><br><span class=\"line\">        result = set()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">            string = <span class=\"string\">''</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">                string += table[ord(char)<span class=\"number\">-97</span>]</span><br><span class=\"line\">            </span><br><span class=\"line\">            result.add(string)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(result)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h6 id=\"leetcode第804题：唯一的摩斯电码\"><a href=\"#leetcode第804题：唯一的摩斯电码\" class=\"headerlink\" title=\"leetcode第804题：唯一的摩斯电码\"></a>leetcode第804题：唯一的摩斯电码</h6><p>给出小写字母对应的摩斯码，输入一个字符串列表，得到字符串列表对应的摩斯码，输出这个不重复的摩斯码的数量</p>\n<pre><code>1. 其中字符串的列表最多有100个字符串\n2. 每个字符串有1-12个字符\n3. 所有字符都是小写字母\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: \"a\" maps to \".-\", \"b\" maps to \"-...\", \"c\" maps to \"-.-.\", and so on.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">For convenience, the full table for the 26 letters of the English alphabet is given below:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]</span></span><br><span class=\"line\"><span class=\"string\">Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We'll call such a concatenation, the transformation of a word.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Return the number of different transformations among all words we have.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example:</span></span><br><span class=\"line\"><span class=\"string\">Input: words = [\"gin\", \"zen\", \"gig\", \"msg\"]</span></span><br><span class=\"line\"><span class=\"string\">Output: 2</span></span><br><span class=\"line\"><span class=\"string\">Explanation: </span></span><br><span class=\"line\"><span class=\"string\">The transformation of each word is:</span></span><br><span class=\"line\"><span class=\"string\">\"gin\" -&gt; \"--...-.\"</span></span><br><span class=\"line\"><span class=\"string\">\"zen\" -&gt; \"--...-.\"</span></span><br><span class=\"line\"><span class=\"string\">\"gig\" -&gt; \"--...--.\"</span></span><br><span class=\"line\"><span class=\"string\">\"msg\" -&gt; \"--...--.\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">There are 2 different transformations, \"--...-.\" and \"--...--.\".</span></span><br><span class=\"line\"><span class=\"string\">Note:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The length of words will be at most 100.</span></span><br><span class=\"line\"><span class=\"string\">Each words[i] will have length in range [1, 12].</span></span><br><span class=\"line\"><span class=\"string\">words[i] will only consist of lowercase letters.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># 题目比较简单，不做解释</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">uniqueMorseRepresentations</span><span class=\"params\">(self, words: List[str])</span> -&gt; int:</span></span><br><span class=\"line\">        table = [<span class=\"string\">\".-\"</span>,<span class=\"string\">\"-...\"</span>,<span class=\"string\">\"-.-.\"</span>,<span class=\"string\">\"-..\"</span>,<span class=\"string\">\".\"</span>,<span class=\"string\">\"..-.\"</span>,<span class=\"string\">\"--.\"</span>,<span class=\"string\">\"....\"</span>,<span class=\"string\">\"..\"</span>,<span class=\"string\">\".---\"</span>,<span class=\"string\">\"-.-\"</span>,<span class=\"string\">\".-..\"</span>,<span class=\"string\">\"--\"</span>,<span class=\"string\">\"-.\"</span>,<span class=\"string\">\"---\"</span>,<span class=\"string\">\".--.\"</span>,<span class=\"string\">\"--.-\"</span>,<span class=\"string\">\".-.\"</span>,<span class=\"string\">\"...\"</span>,<span class=\"string\">\"-\"</span>,<span class=\"string\">\"..-\"</span>,<span class=\"string\">\"...-\"</span>,<span class=\"string\">\".--\"</span>,<span class=\"string\">\"-..-\"</span>,<span class=\"string\">\"-.--\"</span>,<span class=\"string\">\"--..\"</span>]</span><br><span class=\"line\">        result = set()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">            string = <span class=\"string\">''</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">                string += table[ord(char)<span class=\"number\">-97</span>]</span><br><span class=\"line\">            </span><br><span class=\"line\">            result.add(string)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(result)</span><br></pre></td></tr></table></figure>"},{"title":"leetcode第771题：珠宝和石头","_content":"\n###### leetcode第771题：珠宝和石头\n\t给定宝石的种类(字母)和你拥有的石头(字母)，判断你拥有的石头中是否有珠宝，返回你拥有的珠宝的数量。\n\t宝石的种类的是唯一的，并且是大小写敏感的，也就是\"A\"与\"a\"不同\n\n```python\n\n\"\"\"\nYou're given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.\n\nThe letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so \"a\" is considered a different type of stone from \"A\".\n\nExample 1:\n\nInput: J = \"aA\", S = \"aAAbbbb\"\nOutput: 3\nExample 2:\n\nInput: J = \"z\", S = \"ZZ\"\nOutput: 0\nNote:\n\nS and J will consist of letters and have length at most 50.\nThe characters in J are distinct.\n\n\"\"\"\n\n# 直接使用leetcode代码，没有遵循PEP8\nclass Solution:\n    def numJewelsInStones(self, J: str, S: str) -> int:\n    \t# 时间复杂度为O(N+M), 空间复杂度为O(N)\n        stones = dict()\n        jewels_count = 0\n        \n        for s in S:\n            if s not in stones:\n                stones[s] = 0\n            stones[s] += 1\n            \n        for j in J:\n            if j in stones:\n                jewels_count += stones[j]\n        \n        return jewels_count\n\n\n    def numJewelsInStones(self, J: str, S: str) -> int:\n    \t# 时间复杂度为O(N+M), 空间复杂度为O(N)\n    \t# 其他人的答案，自认为比较合适简洁\n        setJ = set(J) # O(n)操作\n        return sum(s in setJ for s in S)\n\n```","source":"_posts/leetcode/771_jewels_and_stones.md","raw":"---\ntitle: leetcode第771题：珠宝和石头\ntags:\n\t- leetcode\n\ncategories:\n\t- leetcode\n\t- leetcode_easy\n---\n\n###### leetcode第771题：珠宝和石头\n\t给定宝石的种类(字母)和你拥有的石头(字母)，判断你拥有的石头中是否有珠宝，返回你拥有的珠宝的数量。\n\t宝石的种类的是唯一的，并且是大小写敏感的，也就是\"A\"与\"a\"不同\n\n```python\n\n\"\"\"\nYou're given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.\n\nThe letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so \"a\" is considered a different type of stone from \"A\".\n\nExample 1:\n\nInput: J = \"aA\", S = \"aAAbbbb\"\nOutput: 3\nExample 2:\n\nInput: J = \"z\", S = \"ZZ\"\nOutput: 0\nNote:\n\nS and J will consist of letters and have length at most 50.\nThe characters in J are distinct.\n\n\"\"\"\n\n# 直接使用leetcode代码，没有遵循PEP8\nclass Solution:\n    def numJewelsInStones(self, J: str, S: str) -> int:\n    \t# 时间复杂度为O(N+M), 空间复杂度为O(N)\n        stones = dict()\n        jewels_count = 0\n        \n        for s in S:\n            if s not in stones:\n                stones[s] = 0\n            stones[s] += 1\n            \n        for j in J:\n            if j in stones:\n                jewels_count += stones[j]\n        \n        return jewels_count\n\n\n    def numJewelsInStones(self, J: str, S: str) -> int:\n    \t# 时间复杂度为O(N+M), 空间复杂度为O(N)\n    \t# 其他人的答案，自认为比较合适简洁\n        setJ = set(J) # O(n)操作\n        return sum(s in setJ for s in S)\n\n```","slug":"leetcode/771_jewels_and_stones","published":1,"date":"2019-03-20T15:26:48.265Z","updated":"2019-03-20T15:40:31.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byl0008rlx3g3l2jyfd","content":"<h6 id=\"leetcode第771题：珠宝和石头\"><a href=\"#leetcode第771题：珠宝和石头\" class=\"headerlink\" title=\"leetcode第771题：珠宝和石头\"></a>leetcode第771题：珠宝和石头</h6><pre><code>给定宝石的种类(字母)和你拥有的石头(字母)，判断你拥有的石头中是否有珠宝，返回你拥有的珠宝的数量。\n宝石的种类的是唯一的，并且是大小写敏感的，也就是&quot;A&quot;与&quot;a&quot;不同\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">You're given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so \"a\" is considered a different type of stone from \"A\".</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: J = \"aA\", S = \"aAAbbbb\"</span></span><br><span class=\"line\"><span class=\"string\">Output: 3</span></span><br><span class=\"line\"><span class=\"string\">Example 2:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: J = \"z\", S = \"ZZ\"</span></span><br><span class=\"line\"><span class=\"string\">Output: 0</span></span><br><span class=\"line\"><span class=\"string\">Note:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">S and J will consist of letters and have length at most 50.</span></span><br><span class=\"line\"><span class=\"string\">The characters in J are distinct.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接使用leetcode代码，没有遵循PEP8</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numJewelsInStones</span><span class=\"params\">(self, J: str, S: str)</span> -&gt; int:</span></span><br><span class=\"line\">    \t<span class=\"comment\"># 时间复杂度为O(N+M), 空间复杂度为O(N)</span></span><br><span class=\"line\">        stones = dict()</span><br><span class=\"line\">        jewels_count = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> S:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> stones:</span><br><span class=\"line\">                stones[s] = <span class=\"number\">0</span></span><br><span class=\"line\">            stones[s] += <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> J:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> j <span class=\"keyword\">in</span> stones:</span><br><span class=\"line\">                jewels_count += stones[j]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> jewels_count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numJewelsInStones</span><span class=\"params\">(self, J: str, S: str)</span> -&gt; int:</span></span><br><span class=\"line\">    \t<span class=\"comment\"># 时间复杂度为O(N+M), 空间复杂度为O(N)</span></span><br><span class=\"line\">    \t<span class=\"comment\"># 其他人的答案，自认为比较合适简洁</span></span><br><span class=\"line\">        setJ = set(J) <span class=\"comment\"># O(n)操作</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum(s <span class=\"keyword\">in</span> setJ <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> S)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h6 id=\"leetcode第771题：珠宝和石头\"><a href=\"#leetcode第771题：珠宝和石头\" class=\"headerlink\" title=\"leetcode第771题：珠宝和石头\"></a>leetcode第771题：珠宝和石头</h6><pre><code>给定宝石的种类(字母)和你拥有的石头(字母)，判断你拥有的石头中是否有珠宝，返回你拥有的珠宝的数量。\n宝石的种类的是唯一的，并且是大小写敏感的，也就是&quot;A&quot;与&quot;a&quot;不同\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">You're given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so \"a\" is considered a different type of stone from \"A\".</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: J = \"aA\", S = \"aAAbbbb\"</span></span><br><span class=\"line\"><span class=\"string\">Output: 3</span></span><br><span class=\"line\"><span class=\"string\">Example 2:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: J = \"z\", S = \"ZZ\"</span></span><br><span class=\"line\"><span class=\"string\">Output: 0</span></span><br><span class=\"line\"><span class=\"string\">Note:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">S and J will consist of letters and have length at most 50.</span></span><br><span class=\"line\"><span class=\"string\">The characters in J are distinct.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 直接使用leetcode代码，没有遵循PEP8</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numJewelsInStones</span><span class=\"params\">(self, J: str, S: str)</span> -&gt; int:</span></span><br><span class=\"line\">    \t<span class=\"comment\"># 时间复杂度为O(N+M), 空间复杂度为O(N)</span></span><br><span class=\"line\">        stones = dict()</span><br><span class=\"line\">        jewels_count = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> S:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> stones:</span><br><span class=\"line\">                stones[s] = <span class=\"number\">0</span></span><br><span class=\"line\">            stones[s] += <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> J:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> j <span class=\"keyword\">in</span> stones:</span><br><span class=\"line\">                jewels_count += stones[j]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> jewels_count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numJewelsInStones</span><span class=\"params\">(self, J: str, S: str)</span> -&gt; int:</span></span><br><span class=\"line\">    \t<span class=\"comment\"># 时间复杂度为O(N+M), 空间复杂度为O(N)</span></span><br><span class=\"line\">    \t<span class=\"comment\"># 其他人的答案，自认为比较合适简洁</span></span><br><span class=\"line\">        setJ = set(J) <span class=\"comment\"># O(n)操作</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum(s <span class=\"keyword\">in</span> setJ <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> S)</span><br></pre></td></tr></table></figure>"},{"title":"leetcode第709题：小写化字符串","_content":"\n###### leetcode第709题：小写化字符串\n\n给定一个字符串，输出字符串的小写。\n\n```python\n\"\"\"\nImplement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.\n\n \n\nExample 1:\n\nInput: \"Hello\"\nOutput: \"hello\"\n\n\"\"\"\n\nclass Solution:\n\t# 题目太简单就不做解释了\n\t# 内建字符串方法lower()\n\t# 或者使用ord, chr的aciss码转换\n\t# 或者建立dict的映射\n    def toLowerCase(self, str: str) -> str:\n        return str.lower()\n        \n\n```\n","source":"_posts/leetcode/709_lower_case.md","raw":"---\ntitle: leetcode第709题：小写化字符串\ntags:\n\t- leetcode\n\ncategories:\n\t- leetcode\n\t- leetcode_easy\n---\n\n###### leetcode第709题：小写化字符串\n\n给定一个字符串，输出字符串的小写。\n\n```python\n\"\"\"\nImplement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.\n\n \n\nExample 1:\n\nInput: \"Hello\"\nOutput: \"hello\"\n\n\"\"\"\n\nclass Solution:\n\t# 题目太简单就不做解释了\n\t# 内建字符串方法lower()\n\t# 或者使用ord, chr的aciss码转换\n\t# 或者建立dict的映射\n    def toLowerCase(self, str: str) -> str:\n        return str.lower()\n        \n\n```\n","slug":"leetcode/709_lower_case","published":1,"date":"2019-03-21T14:58:29.288Z","updated":"2019-03-25T15:24:22.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2bym000brlx36b8uhkye","content":"<h6 id=\"leetcode第709题：小写化字符串\"><a href=\"#leetcode第709题：小写化字符串\" class=\"headerlink\" title=\"leetcode第709题：小写化字符串\"></a>leetcode第709题：小写化字符串</h6><p>给定一个字符串，输出字符串的小写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: \"Hello\"</span></span><br><span class=\"line\"><span class=\"string\">Output: \"hello\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># 题目太简单就不做解释了</span></span><br><span class=\"line\">\t<span class=\"comment\"># 内建字符串方法lower()</span></span><br><span class=\"line\">\t<span class=\"comment\"># 或者使用ord, chr的aciss码转换</span></span><br><span class=\"line\">\t<span class=\"comment\"># 或者建立dict的映射</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toLowerCase</span><span class=\"params\">(self, str: str)</span> -&gt; str:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.lower()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"leetcode第709题：小写化字符串\"><a href=\"#leetcode第709题：小写化字符串\" class=\"headerlink\" title=\"leetcode第709题：小写化字符串\"></a>leetcode第709题：小写化字符串</h6><p>给定一个字符串，输出字符串的小写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: \"Hello\"</span></span><br><span class=\"line\"><span class=\"string\">Output: \"hello\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># 题目太简单就不做解释了</span></span><br><span class=\"line\">\t<span class=\"comment\"># 内建字符串方法lower()</span></span><br><span class=\"line\">\t<span class=\"comment\"># 或者使用ord, chr的aciss码转换</span></span><br><span class=\"line\">\t<span class=\"comment\"># 或者建立dict的映射</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toLowerCase</span><span class=\"params\">(self, str: str)</span> -&gt; str:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.lower()</span><br></pre></td></tr></table></figure>\n"},{"title":"leetcode第905题：奇偶排序","_content":"\n###### leetcode第905题：给数组进行奇偶排序\n\n输入一个数组\n输出一个数组，偶数在前，奇数在后\n\n\n```python\n\"\"\"\nGiven an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.\nYou may return any answer array that satisfies this condition.\n\nExample 1:\n\nInput: [3,1,2,4]\nOutput: [2,4,3,1]\nThe outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n\n解题思路：\n1. 直接排序，key使用取2的余数\n2. 维持2个指针，p1从前向后，p2从后向前，当p1指向奇数，p2指向偶数，然后交换数值，直到p1 > p2\n\n\"\"\"\n\nclass Solution(object):\n    def sortArrayByParity(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # 使用内建方法\n        # return list(sorted(A, key=lambda x: x%2))\n\n        res = A[:]\n        start = 0  \n        end = len(res) - 1\n        while start < end:\n            if res[start] % 2 == 1 and res[end] % 2 == 0:\n                res[start], res[end] = res[end], res[start]\n                start += 1\n                end -= 1\n            elif res[start] % 2 == 0:\n                start += 1\n            else:\n                end -= 1\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    exs = [([3, 1, 2, 4],), ([1, 1, 1, 1],), ([],), ([1, 2, 3, 4, 5, 6],), ([2, 2, 2, 2, 1, 1],), ([1, 3, 3, 4, 2, 2],)]\n\n    for ex in exs:\n        print(s.sortArrayByParity(*ex))\n\n        \n\n```\n","source":"_posts/leetcode/905_sort_array_by_parity.md","raw":"---\ntitle: leetcode第905题：奇偶排序\ntags:\n\t- leetcode\n\ncategories:\n\t- leetcode\n\t- leetcode_easy\n---\n\n###### leetcode第905题：给数组进行奇偶排序\n\n输入一个数组\n输出一个数组，偶数在前，奇数在后\n\n\n```python\n\"\"\"\nGiven an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.\nYou may return any answer array that satisfies this condition.\n\nExample 1:\n\nInput: [3,1,2,4]\nOutput: [2,4,3,1]\nThe outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n\n解题思路：\n1. 直接排序，key使用取2的余数\n2. 维持2个指针，p1从前向后，p2从后向前，当p1指向奇数，p2指向偶数，然后交换数值，直到p1 > p2\n\n\"\"\"\n\nclass Solution(object):\n    def sortArrayByParity(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        # 使用内建方法\n        # return list(sorted(A, key=lambda x: x%2))\n\n        res = A[:]\n        start = 0  \n        end = len(res) - 1\n        while start < end:\n            if res[start] % 2 == 1 and res[end] % 2 == 0:\n                res[start], res[end] = res[end], res[start]\n                start += 1\n                end -= 1\n            elif res[start] % 2 == 0:\n                start += 1\n            else:\n                end -= 1\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    exs = [([3, 1, 2, 4],), ([1, 1, 1, 1],), ([],), ([1, 2, 3, 4, 5, 6],), ([2, 2, 2, 2, 1, 1],), ([1, 3, 3, 4, 2, 2],)]\n\n    for ex in exs:\n        print(s.sortArrayByParity(*ex))\n\n        \n\n```\n","slug":"leetcode/905_sort_array_by_parity","published":1,"date":"2019-03-27T14:47:22.498Z","updated":"2019-03-27T14:49:58.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byo000crlx3kibnys41","content":"<h6 id=\"leetcode第905题：给数组进行奇偶排序\"><a href=\"#leetcode第905题：给数组进行奇偶排序\" class=\"headerlink\" title=\"leetcode第905题：给数组进行奇偶排序\"></a>leetcode第905题：给数组进行奇偶排序</h6><p>输入一个数组<br>输出一个数组，偶数在前，奇数在后</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.</span></span><br><span class=\"line\"><span class=\"string\">You may return any answer array that satisfies this condition.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: [3,1,2,4]</span></span><br><span class=\"line\"><span class=\"string\">Output: [2,4,3,1]</span></span><br><span class=\"line\"><span class=\"string\">The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">解题思路：</span></span><br><span class=\"line\"><span class=\"string\">1. 直接排序，key使用取2的余数</span></span><br><span class=\"line\"><span class=\"string\">2. 维持2个指针，p1从前向后，p2从后向前，当p1指向奇数，p2指向偶数，然后交换数值，直到p1 &gt; p2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sortArrayByParity</span><span class=\"params\">(self, A)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type A: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用内建方法</span></span><br><span class=\"line\">        <span class=\"comment\"># return list(sorted(A, key=lambda x: x%2))</span></span><br><span class=\"line\"></span><br><span class=\"line\">        res = A[:]</span><br><span class=\"line\">        start = <span class=\"number\">0</span>  </span><br><span class=\"line\">        end = len(res) - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> start &lt; end:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res[start] % <span class=\"number\">2</span> == <span class=\"number\">1</span> <span class=\"keyword\">and</span> res[end] % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                res[start], res[end] = res[end], res[start]</span><br><span class=\"line\">                start += <span class=\"number\">1</span></span><br><span class=\"line\">                end -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> res[start] % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                start += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                end -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    s = Solution()</span><br><span class=\"line\">    exs = [([<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>],), ([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],), ([],), ([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>],), ([<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],), ([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>],)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ex <span class=\"keyword\">in</span> exs:</span><br><span class=\"line\">        print(s.sortArrayByParity(*ex))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"leetcode第905题：给数组进行奇偶排序\"><a href=\"#leetcode第905题：给数组进行奇偶排序\" class=\"headerlink\" title=\"leetcode第905题：给数组进行奇偶排序\"></a>leetcode第905题：给数组进行奇偶排序</h6><p>输入一个数组<br>输出一个数组，偶数在前，奇数在后</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.</span></span><br><span class=\"line\"><span class=\"string\">You may return any answer array that satisfies this condition.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: [3,1,2,4]</span></span><br><span class=\"line\"><span class=\"string\">Output: [2,4,3,1]</span></span><br><span class=\"line\"><span class=\"string\">The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">解题思路：</span></span><br><span class=\"line\"><span class=\"string\">1. 直接排序，key使用取2的余数</span></span><br><span class=\"line\"><span class=\"string\">2. 维持2个指针，p1从前向后，p2从后向前，当p1指向奇数，p2指向偶数，然后交换数值，直到p1 &gt; p2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sortArrayByParity</span><span class=\"params\">(self, A)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type A: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用内建方法</span></span><br><span class=\"line\">        <span class=\"comment\"># return list(sorted(A, key=lambda x: x%2))</span></span><br><span class=\"line\"></span><br><span class=\"line\">        res = A[:]</span><br><span class=\"line\">        start = <span class=\"number\">0</span>  </span><br><span class=\"line\">        end = len(res) - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> start &lt; end:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> res[start] % <span class=\"number\">2</span> == <span class=\"number\">1</span> <span class=\"keyword\">and</span> res[end] % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                res[start], res[end] = res[end], res[start]</span><br><span class=\"line\">                start += <span class=\"number\">1</span></span><br><span class=\"line\">                end -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> res[start] % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                start += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                end -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    s = Solution()</span><br><span class=\"line\">    exs = [([<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>],), ([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],), ([],), ([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>],), ([<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],), ([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>],)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ex <span class=\"keyword\">in</span> exs:</span><br><span class=\"line\">        print(s.sortArrayByParity(*ex))</span><br></pre></td></tr></table></figure>\n"},{"title":"leetcode第961题：找出重复出现n个的元素","_content":"\n###### leetcode第961题：找出在包含2n的元素的数组中重复出现n个的元素\n\n输入一个列表，这个列表包含2n个元素，其中有n个元素是重复的，其他元素都是只会出现一次，输出这个重复元素的值\n\n\n```python\n\"\"\"\nIn a array A of size 2N, there are N+1 unique elements, and exactly one of these elements is repeated N times.\n\nReturn the element repeated N times.\n\n \n\nExample 1:\n\nInput: [1,2,3,3]\nOutput: 3\nExample 2:\n\nInput: [2,1,2,5,3,2]\nOutput: 2\n\nNote:\n\n\t4 <= A.length <= 10000\n\t0 <= A[i] < 10000\n\tA.length is even\n\n基本思路：\n\t既然是2n个元素并且有n个元素是重复的，那么重复元素的分布有2种情况：\n\t1. 重复元素至少会连续出现(相邻)一次\n\t2. 如果1不成立，那么说明重复元素是间隔出现\n\t\n\t特殊考虑： 当n=2时，也就是重复元素只出现2次，那么可能存在上述不存在的情况：\n\t第1个元素和第4个元素重复而已： 2，1，3，2\n\n\t遍历整个列表，如果出现相邻(当前元素等于他前面那个元素)或者间隔(当前元素位置i等于i-2位置的元素的值)，那么当前元素就是重复元素\n\t如果遍历结束没找到，那么说明时特殊情况，即4个元素的情况，返回第一个元素即可\n\n\"\"\"\n\nclass Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        for i in range(2, len(A)):\n            if A[i] == A[i-2] or A[i-1] == A[i]:\n                return A[i]\n        \n        return A[0]\n        \n\n```\n","source":"_posts/leetcode/961_n-repeated _element.md","raw":"---\ntitle: leetcode第961题：找出重复出现n个的元素\ntags:\n\t- leetcode\n\ncategories:\n\t- leetcode\n\t- leetcode_easy\n---\n\n###### leetcode第961题：找出在包含2n的元素的数组中重复出现n个的元素\n\n输入一个列表，这个列表包含2n个元素，其中有n个元素是重复的，其他元素都是只会出现一次，输出这个重复元素的值\n\n\n```python\n\"\"\"\nIn a array A of size 2N, there are N+1 unique elements, and exactly one of these elements is repeated N times.\n\nReturn the element repeated N times.\n\n \n\nExample 1:\n\nInput: [1,2,3,3]\nOutput: 3\nExample 2:\n\nInput: [2,1,2,5,3,2]\nOutput: 2\n\nNote:\n\n\t4 <= A.length <= 10000\n\t0 <= A[i] < 10000\n\tA.length is even\n\n基本思路：\n\t既然是2n个元素并且有n个元素是重复的，那么重复元素的分布有2种情况：\n\t1. 重复元素至少会连续出现(相邻)一次\n\t2. 如果1不成立，那么说明重复元素是间隔出现\n\t\n\t特殊考虑： 当n=2时，也就是重复元素只出现2次，那么可能存在上述不存在的情况：\n\t第1个元素和第4个元素重复而已： 2，1，3，2\n\n\t遍历整个列表，如果出现相邻(当前元素等于他前面那个元素)或者间隔(当前元素位置i等于i-2位置的元素的值)，那么当前元素就是重复元素\n\t如果遍历结束没找到，那么说明时特殊情况，即4个元素的情况，返回第一个元素即可\n\n\"\"\"\n\nclass Solution:\n    def repeatedNTimes(self, A: List[int]) -> int:\n        for i in range(2, len(A)):\n            if A[i] == A[i-2] or A[i-1] == A[i]:\n                return A[i]\n        \n        return A[0]\n        \n\n```\n","slug":"leetcode/961_n-repeated _element","published":1,"date":"2019-03-24T14:52:20.986Z","updated":"2019-03-24T15:03:12.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byp000grlx3xx9blhjo","content":"<h6 id=\"leetcode第961题：找出在包含2n的元素的数组中重复出现n个的元素\"><a href=\"#leetcode第961题：找出在包含2n的元素的数组中重复出现n个的元素\" class=\"headerlink\" title=\"leetcode第961题：找出在包含2n的元素的数组中重复出现n个的元素\"></a>leetcode第961题：找出在包含2n的元素的数组中重复出现n个的元素</h6><p>输入一个列表，这个列表包含2n个元素，其中有n个元素是重复的，其他元素都是只会出现一次，输出这个重复元素的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">In a array A of size 2N, there are N+1 unique elements, and exactly one of these elements is repeated N times.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Return the element repeated N times.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: [1,2,3,3]</span></span><br><span class=\"line\"><span class=\"string\">Output: 3</span></span><br><span class=\"line\"><span class=\"string\">Example 2:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: [2,1,2,5,3,2]</span></span><br><span class=\"line\"><span class=\"string\">Output: 2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Note:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t4 &lt;= A.length &lt;= 10000</span></span><br><span class=\"line\"><span class=\"string\">\t0 &lt;= A[i] &lt; 10000</span></span><br><span class=\"line\"><span class=\"string\">\tA.length is even</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">基本思路：</span></span><br><span class=\"line\"><span class=\"string\">\t既然是2n个元素并且有n个元素是重复的，那么重复元素的分布有2种情况：</span></span><br><span class=\"line\"><span class=\"string\">\t1. 重复元素至少会连续出现(相邻)一次</span></span><br><span class=\"line\"><span class=\"string\">\t2. 如果1不成立，那么说明重复元素是间隔出现</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\t特殊考虑： 当n=2时，也就是重复元素只出现2次，那么可能存在上述不存在的情况：</span></span><br><span class=\"line\"><span class=\"string\">\t第1个元素和第4个元素重复而已： 2，1，3，2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t遍历整个列表，如果出现相邻(当前元素等于他前面那个元素)或者间隔(当前元素位置i等于i-2位置的元素的值)，那么当前元素就是重复元素</span></span><br><span class=\"line\"><span class=\"string\">\t如果遍历结束没找到，那么说明时特殊情况，即4个元素的情况，返回第一个元素即可</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">repeatedNTimes</span><span class=\"params\">(self, A: List[int])</span> -&gt; int:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, len(A)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> A[i] == A[i<span class=\"number\">-2</span>] <span class=\"keyword\">or</span> A[i<span class=\"number\">-1</span>] == A[i]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> A[i]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> A[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"leetcode第961题：找出在包含2n的元素的数组中重复出现n个的元素\"><a href=\"#leetcode第961题：找出在包含2n的元素的数组中重复出现n个的元素\" class=\"headerlink\" title=\"leetcode第961题：找出在包含2n的元素的数组中重复出现n个的元素\"></a>leetcode第961题：找出在包含2n的元素的数组中重复出现n个的元素</h6><p>输入一个列表，这个列表包含2n个元素，其中有n个元素是重复的，其他元素都是只会出现一次，输出这个重复元素的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">In a array A of size 2N, there are N+1 unique elements, and exactly one of these elements is repeated N times.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Return the element repeated N times.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: [1,2,3,3]</span></span><br><span class=\"line\"><span class=\"string\">Output: 3</span></span><br><span class=\"line\"><span class=\"string\">Example 2:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: [2,1,2,5,3,2]</span></span><br><span class=\"line\"><span class=\"string\">Output: 2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Note:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t4 &lt;= A.length &lt;= 10000</span></span><br><span class=\"line\"><span class=\"string\">\t0 &lt;= A[i] &lt; 10000</span></span><br><span class=\"line\"><span class=\"string\">\tA.length is even</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">基本思路：</span></span><br><span class=\"line\"><span class=\"string\">\t既然是2n个元素并且有n个元素是重复的，那么重复元素的分布有2种情况：</span></span><br><span class=\"line\"><span class=\"string\">\t1. 重复元素至少会连续出现(相邻)一次</span></span><br><span class=\"line\"><span class=\"string\">\t2. 如果1不成立，那么说明重复元素是间隔出现</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\t特殊考虑： 当n=2时，也就是重复元素只出现2次，那么可能存在上述不存在的情况：</span></span><br><span class=\"line\"><span class=\"string\">\t第1个元素和第4个元素重复而已： 2，1，3，2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t遍历整个列表，如果出现相邻(当前元素等于他前面那个元素)或者间隔(当前元素位置i等于i-2位置的元素的值)，那么当前元素就是重复元素</span></span><br><span class=\"line\"><span class=\"string\">\t如果遍历结束没找到，那么说明时特殊情况，即4个元素的情况，返回第一个元素即可</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">repeatedNTimes</span><span class=\"params\">(self, A: List[int])</span> -&gt; int:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, len(A)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> A[i] == A[i<span class=\"number\">-2</span>] <span class=\"keyword\">or</span> A[i<span class=\"number\">-1</span>] == A[i]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> A[i]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> A[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n"},{"title":"leetcode第977题：有序列表的平方值","_content":"\n###### leetcode第977题：小写化字符串\n\n给定一个非递减的有序列表，返回他们的平方值的列表，并且这个列表进行(伪)递增排序。\n\n```python\n\n\"\"\"\nGiven an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.\n\nExample 1:\nInput: [-4,-1,0,3,10]\nOutput: [0,1,9,16,100]\nExample 2:\nInput: [-7,-3,2,3,11]\nOutput: [4,9,9,49,121]\n \nNote:\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n解题思路：\n    已知道列表的大小，先初始化一个列表，大小和输入的列表一样大。\n    左右指针：\n       左指针从左向右，右指针从右到左\n       如果右指针的绝对值小于左指针，那么将左指针的平方放入刚刚创建的列表，位置在r-l, 反之亦然。\n       一直迭代到r<=l；\n\"\"\"\n\nclass Solution:\n    result = [0] * len(A)\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n    \tif abs(A[left]) < abs(A[right]):\n    \t    result[right - left] = A[right] * A[right]\n    \t    right -= 1\n    \telse:\n            result[right - left] = A[left] * A[left]\n            left += 1\n    return result\n        \n\n```\n","source":"_posts/leetcode/977_squares_of_sorted_array.md","raw":"---\ntitle: leetcode第977题：有序列表的平方值\ntags:\n\t- leetcode\n\ncategories:\n\t- leetcode\n\t- leetcode_easy\n---\n\n###### leetcode第977题：小写化字符串\n\n给定一个非递减的有序列表，返回他们的平方值的列表，并且这个列表进行(伪)递增排序。\n\n```python\n\n\"\"\"\nGiven an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.\n\nExample 1:\nInput: [-4,-1,0,3,10]\nOutput: [0,1,9,16,100]\nExample 2:\nInput: [-7,-3,2,3,11]\nOutput: [4,9,9,49,121]\n \nNote:\n1 <= A.length <= 10000\n-10000 <= A[i] <= 10000\nA is sorted in non-decreasing order.\n\n解题思路：\n    已知道列表的大小，先初始化一个列表，大小和输入的列表一样大。\n    左右指针：\n       左指针从左向右，右指针从右到左\n       如果右指针的绝对值小于左指针，那么将左指针的平方放入刚刚创建的列表，位置在r-l, 反之亦然。\n       一直迭代到r<=l；\n\"\"\"\n\nclass Solution:\n    result = [0] * len(A)\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n    \tif abs(A[left]) < abs(A[right]):\n    \t    result[right - left] = A[right] * A[right]\n    \t    right -= 1\n    \telse:\n            result[right - left] = A[left] * A[left]\n            left += 1\n    return result\n        \n\n```\n","slug":"leetcode/977_squares_of_sorted_array","published":1,"date":"2019-03-25T15:33:42.329Z","updated":"2019-03-25T15:51:43.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byr000irlx3svmqdimx","content":"<h6 id=\"leetcode第977题：小写化字符串\"><a href=\"#leetcode第977题：小写化字符串\" class=\"headerlink\" title=\"leetcode第977题：小写化字符串\"></a>leetcode第977题：小写化字符串</h6><p>给定一个非递减的有序列表，返回他们的平方值的列表，并且这个列表进行(伪)递增排序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\">Input: [-4,-1,0,3,10]</span></span><br><span class=\"line\"><span class=\"string\">Output: [0,1,9,16,100]</span></span><br><span class=\"line\"><span class=\"string\">Example 2:</span></span><br><span class=\"line\"><span class=\"string\">Input: [-7,-3,2,3,11]</span></span><br><span class=\"line\"><span class=\"string\">Output: [4,9,9,49,121]</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">Note:</span></span><br><span class=\"line\"><span class=\"string\">1 &lt;= A.length &lt;= 10000</span></span><br><span class=\"line\"><span class=\"string\">-10000 &lt;= A[i] &lt;= 10000</span></span><br><span class=\"line\"><span class=\"string\">A is sorted in non-decreasing order.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">解题思路：</span></span><br><span class=\"line\"><span class=\"string\">    已知道列表的大小，先初始化一个列表，大小和输入的列表一样大。</span></span><br><span class=\"line\"><span class=\"string\">    左右指针：</span></span><br><span class=\"line\"><span class=\"string\">       左指针从左向右，右指针从右到左</span></span><br><span class=\"line\"><span class=\"string\">       如果右指针的绝对值小于左指针，那么将左指针的平方放入刚刚创建的列表，位置在r-l, 反之亦然。</span></span><br><span class=\"line\"><span class=\"string\">       一直迭代到r&lt;=l；</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    result = [<span class=\"number\">0</span>] * len(A)</span><br><span class=\"line\">    left = <span class=\"number\">0</span></span><br><span class=\"line\">    right = len(A) - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt;= right:</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> abs(A[left]) &lt; abs(A[right]):</span><br><span class=\"line\">    \t    result[right - left] = A[right] * A[right]</span><br><span class=\"line\">    \t    right -= <span class=\"number\">1</span></span><br><span class=\"line\">    \t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result[right - left] = A[left] * A[left]</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"leetcode第977题：小写化字符串\"><a href=\"#leetcode第977题：小写化字符串\" class=\"headerlink\" title=\"leetcode第977题：小写化字符串\"></a>leetcode第977题：小写化字符串</h6><p>给定一个非递减的有序列表，返回他们的平方值的列表，并且这个列表进行(伪)递增排序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\">Input: [-4,-1,0,3,10]</span></span><br><span class=\"line\"><span class=\"string\">Output: [0,1,9,16,100]</span></span><br><span class=\"line\"><span class=\"string\">Example 2:</span></span><br><span class=\"line\"><span class=\"string\">Input: [-7,-3,2,3,11]</span></span><br><span class=\"line\"><span class=\"string\">Output: [4,9,9,49,121]</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">Note:</span></span><br><span class=\"line\"><span class=\"string\">1 &lt;= A.length &lt;= 10000</span></span><br><span class=\"line\"><span class=\"string\">-10000 &lt;= A[i] &lt;= 10000</span></span><br><span class=\"line\"><span class=\"string\">A is sorted in non-decreasing order.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">解题思路：</span></span><br><span class=\"line\"><span class=\"string\">    已知道列表的大小，先初始化一个列表，大小和输入的列表一样大。</span></span><br><span class=\"line\"><span class=\"string\">    左右指针：</span></span><br><span class=\"line\"><span class=\"string\">       左指针从左向右，右指针从右到左</span></span><br><span class=\"line\"><span class=\"string\">       如果右指针的绝对值小于左指针，那么将左指针的平方放入刚刚创建的列表，位置在r-l, 反之亦然。</span></span><br><span class=\"line\"><span class=\"string\">       一直迭代到r&lt;=l；</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    result = [<span class=\"number\">0</span>] * len(A)</span><br><span class=\"line\">    left = <span class=\"number\">0</span></span><br><span class=\"line\">    right = len(A) - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt;= right:</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> abs(A[left]) &lt; abs(A[right]):</span><br><span class=\"line\">    \t    result[right - left] = A[right] * A[right]</span><br><span class=\"line\">    \t    right -= <span class=\"number\">1</span></span><br><span class=\"line\">    \t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result[right - left] = A[left] * A[left]</span><br><span class=\"line\">            left += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n"},{"title":"leetcode第832题：翻转图片","_content":"\n###### leetcode第832题：翻转图片\n\n给定一个二维数组，先将这个数组进行垂直翻转，再将每个元素取反\n\n```python\n\n\"\"\"\nGiven a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image.\n\nTo flip an image horizontally means that each row of the image is reversed.  For example, flipping [1, 1, 0] horizontally results in [0, 1, 1].\n\nTo invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] results in [1, 0, 0].\n\nExample 1:\n\nInput: [[1,1,0],[1,0,1],[0,0,0]]\nOutput: [[1,0,0],[0,1,0],[1,1,1]]\nExplanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\n\n\n\n解题思路：\n    从后向前遍历，每个元素进行与1进行异或，使用嵌套列表生成式。\n\"\"\"\n\n\nclass Solution:\n    def flipAndInvertImage(self, A):\n        return [[1 ^ i for i in l[::-1]] for l in A]\n```","source":"_posts/leetcode/832_flipping_an_image.md","raw":"\n---\ntitle: leetcode第832题：翻转图片\ntags:\n\t- leetcode\n\ncategories:\n\t- leetcode\n\t- leetcode_easy\n---\n\n###### leetcode第832题：翻转图片\n\n给定一个二维数组，先将这个数组进行垂直翻转，再将每个元素取反\n\n```python\n\n\"\"\"\nGiven a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image.\n\nTo flip an image horizontally means that each row of the image is reversed.  For example, flipping [1, 1, 0] horizontally results in [0, 1, 1].\n\nTo invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] results in [1, 0, 0].\n\nExample 1:\n\nInput: [[1,1,0],[1,0,1],[0,0,0]]\nOutput: [[1,0,0],[0,1,0],[1,1,1]]\nExplanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\n\n\n\n解题思路：\n    从后向前遍历，每个元素进行与1进行异或，使用嵌套列表生成式。\n\"\"\"\n\n\nclass Solution:\n    def flipAndInvertImage(self, A):\n        return [[1 ^ i for i in l[::-1]] for l in A]\n```","slug":"leetcode/832_flipping_an_image","published":1,"date":"2019-03-27T15:21:05.515Z","updated":"2019-03-27T15:22:13.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byu000nrlx3ybxkws3n","content":"<h6 id=\"leetcode第832题：翻转图片\"><a href=\"#leetcode第832题：翻转图片\" class=\"headerlink\" title=\"leetcode第832题：翻转图片\"></a>leetcode第832题：翻转图片</h6><p>给定一个二维数组，先将这个数组进行垂直翻转，再将每个元素取反</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Given a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">To flip an image horizontally means that each row of the image is reversed.  For example, flipping [1, 1, 0] horizontally results in [0, 1, 1].</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] results in [1, 0, 0].</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: [[1,1,0],[1,0,1],[0,0,0]]</span></span><br><span class=\"line\"><span class=\"string\">Output: [[1,0,0],[0,1,0],[1,1,1]]</span></span><br><span class=\"line\"><span class=\"string\">Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].</span></span><br><span class=\"line\"><span class=\"string\">Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">解题思路：</span></span><br><span class=\"line\"><span class=\"string\">    从后向前遍历，每个元素进行与1进行异或，使用嵌套列表生成式。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">flipAndInvertImage</span><span class=\"params\">(self, A)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [[<span class=\"number\">1</span> ^ i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> l[::<span class=\"number\">-1</span>]] <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> A]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h6 id=\"leetcode第832题：翻转图片\"><a href=\"#leetcode第832题：翻转图片\" class=\"headerlink\" title=\"leetcode第832题：翻转图片\"></a>leetcode第832题：翻转图片</h6><p>给定一个二维数组，先将这个数组进行垂直翻转，再将每个元素取反</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Given a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">To flip an image horizontally means that each row of the image is reversed.  For example, flipping [1, 1, 0] horizontally results in [0, 1, 1].</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] results in [1, 0, 0].</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: [[1,1,0],[1,0,1],[0,0,0]]</span></span><br><span class=\"line\"><span class=\"string\">Output: [[1,0,0],[0,1,0],[1,1,1]]</span></span><br><span class=\"line\"><span class=\"string\">Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].</span></span><br><span class=\"line\"><span class=\"string\">Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">解题思路：</span></span><br><span class=\"line\"><span class=\"string\">    从后向前遍历，每个元素进行与1进行异或，使用嵌套列表生成式。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">flipAndInvertImage</span><span class=\"params\">(self, A)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [[<span class=\"number\">1</span> ^ i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> l[::<span class=\"number\">-1</span>]] <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> A]</span><br></pre></td></tr></table></figure>"},{"title":"leetcode第929题：唯一邮箱数量","_content":"\n###### leetcode第929题：唯一邮箱数量\n\n给定一个字符串列表，每个字符串是一个邮箱。\n其中@符号前的是本地名，后面的是域名。\n在本地名中，忽略所有的\".\"字符，以及忽略第一个\"+\"后面的字符\n返回唯一的邮箱数量。\n\n```python\n\"\"\"\nIEvery email consists of a local name and a domain name, separated by the @ sign.\n\nFor example, in alice@leetcode.com, alice is the local name, and leetcode.com is the domain name.\n\nBesides lowercase letters, these emails may contain '.'s or '+'s.\n\nIf you add periods ('.') between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address.  (Note that this rule does not apply for domain names.)\n\nIf you add a plus ('+') in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered, for example m.y+name@email.com will be forwarded to my@email.com.  (Again, this rule does not apply for domain names.)\n\nIt is possible to use both of these rules at the same time.\n\nGiven a list of emails, we send one email to each address in the list.  How many different addresses actually receive mails? \n\nExample 1:\n\nInput: [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\nOutput: 2\nExplanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails\n\n\n基本思路：\n  先区分域名和本地名，在对本地名进行\"+\"符号左右分割，再替换所有的.符号。\n\"\"\"\n\nclass Solution:\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        addresses = set()\n        \n        for email in emails:\n            local, domain = email.split('@')\n            local = local.split('+')[0]\n            local = local.replace('.', '')\n            addresses.add(local+domain)\n\n        return len(addresses)\n\n                \n        \n        \n\n```\n","source":"_posts/leetcode/929_unique _email_addresses.md","raw":"---\ntitle: leetcode第929题：唯一邮箱数量\ntags:\n\t- leetcode\n\ncategories:\n\t- leetcode\n\t- leetcode_easy\n---\n\n###### leetcode第929题：唯一邮箱数量\n\n给定一个字符串列表，每个字符串是一个邮箱。\n其中@符号前的是本地名，后面的是域名。\n在本地名中，忽略所有的\".\"字符，以及忽略第一个\"+\"后面的字符\n返回唯一的邮箱数量。\n\n```python\n\"\"\"\nIEvery email consists of a local name and a domain name, separated by the @ sign.\n\nFor example, in alice@leetcode.com, alice is the local name, and leetcode.com is the domain name.\n\nBesides lowercase letters, these emails may contain '.'s or '+'s.\n\nIf you add periods ('.') between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address.  (Note that this rule does not apply for domain names.)\n\nIf you add a plus ('+') in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered, for example m.y+name@email.com will be forwarded to my@email.com.  (Again, this rule does not apply for domain names.)\n\nIt is possible to use both of these rules at the same time.\n\nGiven a list of emails, we send one email to each address in the list.  How many different addresses actually receive mails? \n\nExample 1:\n\nInput: [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\nOutput: 2\nExplanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails\n\n\n基本思路：\n  先区分域名和本地名，在对本地名进行\"+\"符号左右分割，再替换所有的.符号。\n\"\"\"\n\nclass Solution:\n    def numUniqueEmails(self, emails: List[str]) -> int:\n        addresses = set()\n        \n        for email in emails:\n            local, domain = email.split('@')\n            local = local.split('+')[0]\n            local = local.replace('.', '')\n            addresses.add(local+domain)\n\n        return len(addresses)\n\n                \n        \n        \n\n```\n","slug":"leetcode/929_unique _email_addresses","published":1,"date":"2019-03-21T15:44:10.493Z","updated":"2019-03-21T15:50:20.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byv000prlx3kap7swv3","content":"<h6 id=\"leetcode第929题：唯一邮箱数量\"><a href=\"#leetcode第929题：唯一邮箱数量\" class=\"headerlink\" title=\"leetcode第929题：唯一邮箱数量\"></a>leetcode第929题：唯一邮箱数量</h6><p>给定一个字符串列表，每个字符串是一个邮箱。<br>其中@符号前的是本地名，后面的是域名。<br>在本地名中，忽略所有的”.”字符，以及忽略第一个”+”后面的字符<br>返回唯一的邮箱数量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">IEvery email consists of a local name and a domain name, separated by the @ sign.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">For example, in alice@leetcode.com, alice is the local name, and leetcode.com is the domain name.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Besides lowercase letters, these emails may contain '.'s or '+'s.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">If you add periods ('.') between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address.  (Note that this rule does not apply for domain names.)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">If you add a plus ('+') in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered, for example m.y+name@email.com will be forwarded to my@email.com.  (Again, this rule does not apply for domain names.)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">It is possible to use both of these rules at the same time.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Given a list of emails, we send one email to each address in the list.  How many different addresses actually receive mails? </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]</span></span><br><span class=\"line\"><span class=\"string\">Output: 2</span></span><br><span class=\"line\"><span class=\"string\">Explanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">基本思路：</span></span><br><span class=\"line\"><span class=\"string\">  先区分域名和本地名，在对本地名进行\"+\"符号左右分割，再替换所有的.符号。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numUniqueEmails</span><span class=\"params\">(self, emails: List[str])</span> -&gt; int:</span></span><br><span class=\"line\">        addresses = set()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> email <span class=\"keyword\">in</span> emails:</span><br><span class=\"line\">            local, domain = email.split(<span class=\"string\">'@'</span>)</span><br><span class=\"line\">            local = local.split(<span class=\"string\">'+'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            local = local.replace(<span class=\"string\">'.'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">            addresses.add(local+domain)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(addresses)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"leetcode第929题：唯一邮箱数量\"><a href=\"#leetcode第929题：唯一邮箱数量\" class=\"headerlink\" title=\"leetcode第929题：唯一邮箱数量\"></a>leetcode第929题：唯一邮箱数量</h6><p>给定一个字符串列表，每个字符串是一个邮箱。<br>其中@符号前的是本地名，后面的是域名。<br>在本地名中，忽略所有的”.”字符，以及忽略第一个”+”后面的字符<br>返回唯一的邮箱数量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">IEvery email consists of a local name and a domain name, separated by the @ sign.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">For example, in alice@leetcode.com, alice is the local name, and leetcode.com is the domain name.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Besides lowercase letters, these emails may contain '.'s or '+'s.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">If you add periods ('.') between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address.  (Note that this rule does not apply for domain names.)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">If you add a plus ('+') in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered, for example m.y+name@email.com will be forwarded to my@email.com.  (Again, this rule does not apply for domain names.)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">It is possible to use both of these rules at the same time.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Given a list of emails, we send one email to each address in the list.  How many different addresses actually receive mails? </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Example 1:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Input: [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]</span></span><br><span class=\"line\"><span class=\"string\">Output: 2</span></span><br><span class=\"line\"><span class=\"string\">Explanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">基本思路：</span></span><br><span class=\"line\"><span class=\"string\">  先区分域名和本地名，在对本地名进行\"+\"符号左右分割，再替换所有的.符号。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numUniqueEmails</span><span class=\"params\">(self, emails: List[str])</span> -&gt; int:</span></span><br><span class=\"line\">        addresses = set()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> email <span class=\"keyword\">in</span> emails:</span><br><span class=\"line\">            local, domain = email.split(<span class=\"string\">'@'</span>)</span><br><span class=\"line\">            local = local.split(<span class=\"string\">'+'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            local = local.replace(<span class=\"string\">'.'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">            addresses.add(local+domain)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(addresses)</span><br></pre></td></tr></table></figure>\n"},{"title":"初始redis-cluster","_content":"\n\n### 分布式原因：\n1，ops: 并发量过大，单机无法满足\n2，数据量，存储的数据过大\n3，网络：访问量过多，单机网卡无法支撑\n\n### 分区方式：\n1，节点取余\n\ta. 客户端分片： 哈希+取余\n\tb. 节点伸缩： 数据节点关系变化，导致数据迁移\n\tc. 迁移数量和添加节点有关：建议翻倍扩容。","source":"_posts/redis/redis-cluster-simple.md","raw":"---\ntitle: 初始redis-cluster\ntags:\n\t- redis\n\t- 分布式\n\t- 集群\ncategories:\n\t- redis\n---\n\n\n### 分布式原因：\n1，ops: 并发量过大，单机无法满足\n2，数据量，存储的数据过大\n3，网络：访问量过多，单机网卡无法支撑\n\n### 分区方式：\n1，节点取余\n\ta. 客户端分片： 哈希+取余\n\tb. 节点伸缩： 数据节点关系变化，导致数据迁移\n\tc. 迁移数量和添加节点有关：建议翻倍扩容。","slug":"redis/redis-cluster-simple","published":1,"date":"2019-03-03T08:59:10.025Z","updated":"2019-03-21T15:36:52.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byw000trlx3ptlbavae","content":"<h3 id=\"分布式原因：\"><a href=\"#分布式原因：\" class=\"headerlink\" title=\"分布式原因：\"></a>分布式原因：</h3><p>1，ops: 并发量过大，单机无法满足<br>2，数据量，存储的数据过大<br>3，网络：访问量过多，单机网卡无法支撑</p>\n<h3 id=\"分区方式：\"><a href=\"#分区方式：\" class=\"headerlink\" title=\"分区方式：\"></a>分区方式：</h3><p>1，节点取余<br>    a. 客户端分片： 哈希+取余<br>    b. 节点伸缩： 数据节点关系变化，导致数据迁移<br>    c. 迁移数量和添加节点有关：建议翻倍扩容。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"分布式原因：\"><a href=\"#分布式原因：\" class=\"headerlink\" title=\"分布式原因：\"></a>分布式原因：</h3><p>1，ops: 并发量过大，单机无法满足<br>2，数据量，存储的数据过大<br>3，网络：访问量过多，单机网卡无法支撑</p>\n<h3 id=\"分区方式：\"><a href=\"#分区方式：\" class=\"headerlink\" title=\"分区方式：\"></a>分区方式：</h3><p>1，节点取余<br>    a. 客户端分片： 哈希+取余<br>    b. 节点伸缩： 数据节点关系变化，导致数据迁移<br>    c. 迁移数量和添加节点有关：建议翻倍扩容。</p>\n"},{"title":"管理多个ssh主机","_content":"\n新公司使用mac办公，以前都是用windows，使用xshell管理服务器，发现并没有mac版本的。\n听说其他方式据说不是很稳定，那么就决定自己使用ssh_config文件管理。\n\n#### 基础工作\n\n1. 生成本地ssh密钥，这里对密钥生成不做介绍。\n2. 将公钥文件所有内容拷贝到你需要 **远程的用户** 的~/.ssh/authorized_keys文件中，如果文件不存在，就创建。\n3. 配备ssh config文件\n\n#### 设置config文件\n\n1. 进入～/.ssh/文件夹：cd ~/.ssh/\n2. 创建或修改config文件： vim config\n3. 加入要远程主机的内容:\n\n```yaml\nHost remote_server\n  Hostname x.x.x.x\n  Port 22\n  User root\n  Identityfile ~/.ssh/id_rsa\n\n Host remote_server2\n  Hostname x.x.x.x\n  Port 22\n  User root\n  Identityfile ~/.ssh/id_rsa\n```\n\n4. 远程：ssh remote_server/ ssh remote_server2。\n\n","source":"_posts/ssh/ssh_config.md","raw":"---\ntitle: 管理多个ssh主机\ntags:\n\t- ssh\n\ncategories:\n\t- linux\n---\n\n新公司使用mac办公，以前都是用windows，使用xshell管理服务器，发现并没有mac版本的。\n听说其他方式据说不是很稳定，那么就决定自己使用ssh_config文件管理。\n\n#### 基础工作\n\n1. 生成本地ssh密钥，这里对密钥生成不做介绍。\n2. 将公钥文件所有内容拷贝到你需要 **远程的用户** 的~/.ssh/authorized_keys文件中，如果文件不存在，就创建。\n3. 配备ssh config文件\n\n#### 设置config文件\n\n1. 进入～/.ssh/文件夹：cd ~/.ssh/\n2. 创建或修改config文件： vim config\n3. 加入要远程主机的内容:\n\n```yaml\nHost remote_server\n  Hostname x.x.x.x\n  Port 22\n  User root\n  Identityfile ~/.ssh/id_rsa\n\n Host remote_server2\n  Hostname x.x.x.x\n  Port 22\n  User root\n  Identityfile ~/.ssh/id_rsa\n```\n\n4. 远程：ssh remote_server/ ssh remote_server2。\n\n","slug":"ssh/ssh_config","published":1,"date":"2019-03-24T15:34:03.516Z","updated":"2019-09-03T15:22:54.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byx000vrlx3vasuhqqw","content":"<p>新公司使用mac办公，以前都是用windows，使用xshell管理服务器，发现并没有mac版本的。<br>听说其他方式据说不是很稳定，那么就决定自己使用ssh_config文件管理。</p>\n<h4 id=\"基础工作\"><a href=\"#基础工作\" class=\"headerlink\" title=\"基础工作\"></a>基础工作</h4><ol>\n<li>生成本地ssh密钥，这里对密钥生成不做介绍。</li>\n<li>将公钥文件所有内容拷贝到你需要 <strong>远程的用户</strong> 的~/.ssh/authorized_keys文件中，如果文件不存在，就创建。</li>\n<li>配备ssh config文件</li>\n</ol>\n<h4 id=\"设置config文件\"><a href=\"#设置config文件\" class=\"headerlink\" title=\"设置config文件\"></a>设置config文件</h4><ol>\n<li>进入～/.ssh/文件夹：cd ~/.ssh/</li>\n<li>创建或修改config文件： vim config</li>\n<li>加入要远程主机的内容:</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Host</span> <span class=\"string\">remote_server</span></span><br><span class=\"line\">  <span class=\"string\">Hostname</span> <span class=\"string\">x.x.x.x</span></span><br><span class=\"line\">  <span class=\"string\">Port</span> <span class=\"number\">22</span></span><br><span class=\"line\">  <span class=\"string\">User</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"string\">Identityfile</span> <span class=\"string\">~/.ssh/id_rsa</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">Host</span> <span class=\"string\">remote_server2</span></span><br><span class=\"line\">  <span class=\"string\">Hostname</span> <span class=\"string\">x.x.x.x</span></span><br><span class=\"line\">  <span class=\"string\">Port</span> <span class=\"number\">22</span></span><br><span class=\"line\">  <span class=\"string\">User</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"string\">Identityfile</span> <span class=\"string\">~/.ssh/id_rsa</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>远程：ssh remote_server/ ssh remote_server2。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>新公司使用mac办公，以前都是用windows，使用xshell管理服务器，发现并没有mac版本的。<br>听说其他方式据说不是很稳定，那么就决定自己使用ssh_config文件管理。</p>\n<h4 id=\"基础工作\"><a href=\"#基础工作\" class=\"headerlink\" title=\"基础工作\"></a>基础工作</h4><ol>\n<li>生成本地ssh密钥，这里对密钥生成不做介绍。</li>\n<li>将公钥文件所有内容拷贝到你需要 <strong>远程的用户</strong> 的~/.ssh/authorized_keys文件中，如果文件不存在，就创建。</li>\n<li>配备ssh config文件</li>\n</ol>\n<h4 id=\"设置config文件\"><a href=\"#设置config文件\" class=\"headerlink\" title=\"设置config文件\"></a>设置config文件</h4><ol>\n<li>进入～/.ssh/文件夹：cd ~/.ssh/</li>\n<li>创建或修改config文件： vim config</li>\n<li>加入要远程主机的内容:</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Host</span> <span class=\"string\">remote_server</span></span><br><span class=\"line\">  <span class=\"string\">Hostname</span> <span class=\"string\">x.x.x.x</span></span><br><span class=\"line\">  <span class=\"string\">Port</span> <span class=\"number\">22</span></span><br><span class=\"line\">  <span class=\"string\">User</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"string\">Identityfile</span> <span class=\"string\">~/.ssh/id_rsa</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"string\">Host</span> <span class=\"string\">remote_server2</span></span><br><span class=\"line\">  <span class=\"string\">Hostname</span> <span class=\"string\">x.x.x.x</span></span><br><span class=\"line\">  <span class=\"string\">Port</span> <span class=\"number\">22</span></span><br><span class=\"line\">  <span class=\"string\">User</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"string\">Identityfile</span> <span class=\"string\">~/.ssh/id_rsa</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>远程：ssh remote_server/ ssh remote_server2。</li>\n</ol>\n"},{"title":"kafka同步到es","_content":"\n随着工作项目越来越多，并且由于未统一日志输出方式、是到文件、到控制台，各种类型到服务，如http，tcp等。发现日志越来越多，并发写入es的数量越来越多，导致es十分的不稳定，伴随着写入性能的堪忧，日志的丢失等等，各类服务需要写入重试的机制。最后，决定在引入中间件：kafka。\n\n### why kafka?\n\n1. 性能，kafka具有优秀的读写性能，极高的吞吐量。\n\n2. 支持批量处理\n\n3. 对于日志场景非常合适，logstash、filebeat等工具都直接支持kafka.\n\n### 同步工具\n\n- logstash\n- kafka connector\n- 自开发\n\n由于时间成本问题，自己开发这种没有考虑。剩下两种都尝试了。\n\n### kafka connector\n\n第一次选型使用了这个connector, 主要是参考了网上的一些文章，觉得logstash可能不稳定，这个更好(实在太单纯)。当然了，既然踩过了坑，无论如何也要记录下来吧。或者是我使用方式不正确。\n使用的是[kafka-connect-elasticsearch](https://github.com/confluentinc/kafka-connect-elasticsearch)\n\n#### 基本架构\n\n![架构](kafka_to_es/connector.jpg)\n将json数据直接发送kafka中，写入log_开头的topic: log_($index_name), 然后会在elasticsearch中生成一个$index_name。\n\n#### 部署connector\n\n```shell\n# 采用docker\ndocker run \\\n-p 8082:8082 \\\n-e CONNECT_BOOTSTRAP_SERVERS=kafka_addr:9092 \\\n-e CONNECT_REST_PORT=8082 \\\n-e CONNECT_GROUP_ID=_connector_es \\\n-e CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false \\\n-e CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false \\\n-e CONNECT_CONFIG_STORAGE_TOPIC=_connector-es-config \\\n-e CONNECT_OFFSET_STORAGE_TOPIC=_connector-es-offset \\\n-e CONNECT_STATUS_STORAGE_TOPIC=_connector-es-status \\\n-e CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter \\\n-e CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter \\\n-e CONNECT_REST_ADVERTISED_HOST_NAME=kafka-connect \\\n-e CONNECT_PLUGIN_PATH=/usr/share/java \\\nconfluentinc/cp-kafka-connect:latest\n```\n\n#### 注册连接器\n\n连接器的文档查看官方文档。\n\n```python\n# post http://#####/connectors/\n#\n \n{\n  \"name\": \"es-sink\",  # connector名称\n  \"config\": {\n    \"connector.class\": \"io.confluent.connect.elasticsearch.ElasticsearchSinkConnector\",\n    \"tasks.max\": \"3\",  # worker数量\n    \"topics.regex\": \"log_(.*)\",  # 匹配kafka topic\n    \"key.ignore\": \"true\",\n    \"schema.ignore\": \"true\",\n    \"connection.url\": \"http://#####:9200/\",  # es地址\n    \"type.name\": \"\",  # 日志的_type名称，默认为_doc\n    \"name\": \"es-sink\",   # connector名称, 与外层connector同名\n    \"value.converter.schemas.enable\": \"false\",\n    \"key.converter.schemas.enable\":\"false\",\n    \"auto.create\": \"true\", # 自动创建topic\n \n    # 对topic进行正则后对策略\n    \"transforms\":\"dropPrefix\",\n    \"transforms.dropPrefix.type\":\"org.apache.kafka.connect.transforms.RegexRouter\",\n    \"transforms.dropPrefix.regex\":\"log_(.*)\",  # 丢弃topic名称部分\n    \"transforms.dropPrefix.replacement\":\"$1\",  # 用什么代替丢弃的部分，这里表示，用正则出来的代替本来的，例如 name 代替 log_name\n \n    \"batch.size\": 100,  # 批量写es\n    \"max.buffered.records\": 1000,  # 单个worker最高并发写es的数量\n    \"flush.timeout.ms\": 20000  # 写es超时时间\n  }\n}\n\n```\n\nconnector会利用\n\n#### 注册连接\n\n### 算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法\n基本思路：在长度为n的列表，随机选择第k个元素，将第k个元素和第n个元素进行交换，接着再取随机取第j个元素和第n-1元素进行交换，一直循环。\n\n![选择洗牌](image/swap.jpg)\n\n```python\ndef swap_shuffle(nums):\n    length = len(nums)\n    if length <= 1:\n        return\n    while length > 1:\n        index = random.randrange(0, length)\n        nums[index], nums[length-1] = nums[length-1], nums[index]\n        length -= 1\n```\n时间复杂度：O(n)\n空间复杂度：O(1)\n\n\n### 算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法\n基本思路：在长度为n的列表，从前向后遍历，在位置j时(j>1), 随机在[0, j]随机选择第i个元素，然后将第i元素和第j个元素进行交换，一直循环。这种方式看上去就像插入(并不是插入)。\n\n\n![插入洗牌](shuffle/insert.jpg)\n\n```python\ndef insert_shuffle(nums):\n    length = len(nums)\n    if length <= 1:\n        return\n    # 从第2个元素向后遍历\n    start = 1\n    while start < length:\n        index = random.randrange(0, start+1)\n        nums[index], nums[start] = nums[start], nums[index]\n        start += 1\n```\n时间复杂度：O(n)\n空间复杂度：O(1)\n\n","source":"_posts/log/kafka_to_es.md","raw":"---\ntitle: kafka同步到es\ntags: \n    - kafka\n    - 日志储存\n    - elasticsearch\n    - logstash\ncategories:\n\t- log\n---\n\n随着工作项目越来越多，并且由于未统一日志输出方式、是到文件、到控制台，各种类型到服务，如http，tcp等。发现日志越来越多，并发写入es的数量越来越多，导致es十分的不稳定，伴随着写入性能的堪忧，日志的丢失等等，各类服务需要写入重试的机制。最后，决定在引入中间件：kafka。\n\n### why kafka?\n\n1. 性能，kafka具有优秀的读写性能，极高的吞吐量。\n\n2. 支持批量处理\n\n3. 对于日志场景非常合适，logstash、filebeat等工具都直接支持kafka.\n\n### 同步工具\n\n- logstash\n- kafka connector\n- 自开发\n\n由于时间成本问题，自己开发这种没有考虑。剩下两种都尝试了。\n\n### kafka connector\n\n第一次选型使用了这个connector, 主要是参考了网上的一些文章，觉得logstash可能不稳定，这个更好(实在太单纯)。当然了，既然踩过了坑，无论如何也要记录下来吧。或者是我使用方式不正确。\n使用的是[kafka-connect-elasticsearch](https://github.com/confluentinc/kafka-connect-elasticsearch)\n\n#### 基本架构\n\n![架构](kafka_to_es/connector.jpg)\n将json数据直接发送kafka中，写入log_开头的topic: log_($index_name), 然后会在elasticsearch中生成一个$index_name。\n\n#### 部署connector\n\n```shell\n# 采用docker\ndocker run \\\n-p 8082:8082 \\\n-e CONNECT_BOOTSTRAP_SERVERS=kafka_addr:9092 \\\n-e CONNECT_REST_PORT=8082 \\\n-e CONNECT_GROUP_ID=_connector_es \\\n-e CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false \\\n-e CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false \\\n-e CONNECT_CONFIG_STORAGE_TOPIC=_connector-es-config \\\n-e CONNECT_OFFSET_STORAGE_TOPIC=_connector-es-offset \\\n-e CONNECT_STATUS_STORAGE_TOPIC=_connector-es-status \\\n-e CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter \\\n-e CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter \\\n-e CONNECT_REST_ADVERTISED_HOST_NAME=kafka-connect \\\n-e CONNECT_PLUGIN_PATH=/usr/share/java \\\nconfluentinc/cp-kafka-connect:latest\n```\n\n#### 注册连接器\n\n连接器的文档查看官方文档。\n\n```python\n# post http://#####/connectors/\n#\n \n{\n  \"name\": \"es-sink\",  # connector名称\n  \"config\": {\n    \"connector.class\": \"io.confluent.connect.elasticsearch.ElasticsearchSinkConnector\",\n    \"tasks.max\": \"3\",  # worker数量\n    \"topics.regex\": \"log_(.*)\",  # 匹配kafka topic\n    \"key.ignore\": \"true\",\n    \"schema.ignore\": \"true\",\n    \"connection.url\": \"http://#####:9200/\",  # es地址\n    \"type.name\": \"\",  # 日志的_type名称，默认为_doc\n    \"name\": \"es-sink\",   # connector名称, 与外层connector同名\n    \"value.converter.schemas.enable\": \"false\",\n    \"key.converter.schemas.enable\":\"false\",\n    \"auto.create\": \"true\", # 自动创建topic\n \n    # 对topic进行正则后对策略\n    \"transforms\":\"dropPrefix\",\n    \"transforms.dropPrefix.type\":\"org.apache.kafka.connect.transforms.RegexRouter\",\n    \"transforms.dropPrefix.regex\":\"log_(.*)\",  # 丢弃topic名称部分\n    \"transforms.dropPrefix.replacement\":\"$1\",  # 用什么代替丢弃的部分，这里表示，用正则出来的代替本来的，例如 name 代替 log_name\n \n    \"batch.size\": 100,  # 批量写es\n    \"max.buffered.records\": 1000,  # 单个worker最高并发写es的数量\n    \"flush.timeout.ms\": 20000  # 写es超时时间\n  }\n}\n\n```\n\nconnector会利用\n\n#### 注册连接\n\n### 算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法\n基本思路：在长度为n的列表，随机选择第k个元素，将第k个元素和第n个元素进行交换，接着再取随机取第j个元素和第n-1元素进行交换，一直循环。\n\n![选择洗牌](image/swap.jpg)\n\n```python\ndef swap_shuffle(nums):\n    length = len(nums)\n    if length <= 1:\n        return\n    while length > 1:\n        index = random.randrange(0, length)\n        nums[index], nums[length-1] = nums[length-1], nums[index]\n        length -= 1\n```\n时间复杂度：O(n)\n空间复杂度：O(1)\n\n\n### 算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法\n基本思路：在长度为n的列表，从前向后遍历，在位置j时(j>1), 随机在[0, j]随机选择第i个元素，然后将第i元素和第j个元素进行交换，一直循环。这种方式看上去就像插入(并不是插入)。\n\n\n![插入洗牌](shuffle/insert.jpg)\n\n```python\ndef insert_shuffle(nums):\n    length = len(nums)\n    if length <= 1:\n        return\n    # 从第2个元素向后遍历\n    start = 1\n    while start < length:\n        index = random.randrange(0, start+1)\n        nums[index], nums[start] = nums[start], nums[index]\n        start += 1\n```\n时间复杂度：O(n)\n空间复杂度：O(1)\n\n","slug":"log/kafka_to_es","published":1,"date":"2020-06-09T14:50:54.188Z","updated":"2020-06-09T15:48:34.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2byy000xrlx3ydqui7lg","content":"<p>随着工作项目越来越多，并且由于未统一日志输出方式、是到文件、到控制台，各种类型到服务，如http，tcp等。发现日志越来越多，并发写入es的数量越来越多，导致es十分的不稳定，伴随着写入性能的堪忧，日志的丢失等等，各类服务需要写入重试的机制。最后，决定在引入中间件：kafka。</p>\n<h3 id=\"why-kafka\"><a href=\"#why-kafka\" class=\"headerlink\" title=\"why kafka?\"></a>why kafka?</h3><ol>\n<li><p>性能，kafka具有优秀的读写性能，极高的吞吐量。</p>\n</li>\n<li><p>支持批量处理</p>\n</li>\n<li><p>对于日志场景非常合适，logstash、filebeat等工具都直接支持kafka.</p>\n</li>\n</ol>\n<h3 id=\"同步工具\"><a href=\"#同步工具\" class=\"headerlink\" title=\"同步工具\"></a>同步工具</h3><ul>\n<li>logstash</li>\n<li>kafka connector</li>\n<li>自开发</li>\n</ul>\n<p>由于时间成本问题，自己开发这种没有考虑。剩下两种都尝试了。</p>\n<h3 id=\"kafka-connector\"><a href=\"#kafka-connector\" class=\"headerlink\" title=\"kafka connector\"></a>kafka connector</h3><p>第一次选型使用了这个connector, 主要是参考了网上的一些文章，觉得logstash可能不稳定，这个更好(实在太单纯)。当然了，既然踩过了坑，无论如何也要记录下来吧。或者是我使用方式不正确。<br>使用的是<a href=\"https://github.com/confluentinc/kafka-connect-elasticsearch\" target=\"_blank\" rel=\"noopener\">kafka-connect-elasticsearch</a></p>\n<h4 id=\"基本架构\"><a href=\"#基本架构\" class=\"headerlink\" title=\"基本架构\"></a>基本架构</h4><p><img src=\"/2020/06/09/log/kafka_to_es/connector.jpg\" alt=\"架构\"><br>将json数据直接发送kafka中，写入log_开头的topic: log_($index_name), 然后会在elasticsearch中生成一个$index_name。</p>\n<h4 id=\"部署connector\"><a href=\"#部署connector\" class=\"headerlink\" title=\"部署connector\"></a>部署connector</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 采用docker</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">-p 8082:8082 \\</span><br><span class=\"line\">-e CONNECT_BOOTSTRAP_SERVERS=kafka_addr:9092 \\</span><br><span class=\"line\">-e CONNECT_REST_PORT=8082 \\</span><br><span class=\"line\">-e CONNECT_GROUP_ID=_connector_es \\</span><br><span class=\"line\">-e CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false \\</span><br><span class=\"line\">-e CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false \\</span><br><span class=\"line\">-e CONNECT_CONFIG_STORAGE_TOPIC=_connector-es-config \\</span><br><span class=\"line\">-e CONNECT_OFFSET_STORAGE_TOPIC=_connector-es-offset \\</span><br><span class=\"line\">-e CONNECT_STATUS_STORAGE_TOPIC=_connector-es-status \\</span><br><span class=\"line\">-e CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter \\</span><br><span class=\"line\">-e CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter \\</span><br><span class=\"line\">-e CONNECT_REST_ADVERTISED_HOST_NAME=kafka-connect \\</span><br><span class=\"line\">-e CONNECT_PLUGIN_PATH=/usr/share/java \\</span><br><span class=\"line\">confluentinc/cp-kafka-connect:latest</span><br></pre></td></tr></table></figure>\n<h4 id=\"注册连接器\"><a href=\"#注册连接器\" class=\"headerlink\" title=\"注册连接器\"></a>注册连接器</h4><p>连接器的文档查看官方文档。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># post http://#####/connectors/</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"es-sink\"</span>,  <span class=\"comment\"># connector名称</span></span><br><span class=\"line\">  <span class=\"string\">\"config\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"connector.class\"</span>: <span class=\"string\">\"io.confluent.connect.elasticsearch.ElasticsearchSinkConnector\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"tasks.max\"</span>: <span class=\"string\">\"3\"</span>,  <span class=\"comment\"># worker数量</span></span><br><span class=\"line\">    <span class=\"string\">\"topics.regex\"</span>: <span class=\"string\">\"log_(.*)\"</span>,  <span class=\"comment\"># 匹配kafka topic</span></span><br><span class=\"line\">    <span class=\"string\">\"key.ignore\"</span>: <span class=\"string\">\"true\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"schema.ignore\"</span>: <span class=\"string\">\"true\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"connection.url\"</span>: <span class=\"string\">\"http://#####:9200/\"</span>,  <span class=\"comment\"># es地址</span></span><br><span class=\"line\">    <span class=\"string\">\"type.name\"</span>: <span class=\"string\">\"\"</span>,  <span class=\"comment\"># 日志的_type名称，默认为_doc</span></span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"es-sink\"</span>,   <span class=\"comment\"># connector名称, 与外层connector同名</span></span><br><span class=\"line\">    <span class=\"string\">\"value.converter.schemas.enable\"</span>: <span class=\"string\">\"false\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"key.converter.schemas.enable\"</span>:<span class=\"string\">\"false\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"auto.create\"</span>: <span class=\"string\">\"true\"</span>, <span class=\"comment\"># 自动创建topic</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># 对topic进行正则后对策略</span></span><br><span class=\"line\">    <span class=\"string\">\"transforms\"</span>:<span class=\"string\">\"dropPrefix\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"transforms.dropPrefix.type\"</span>:<span class=\"string\">\"org.apache.kafka.connect.transforms.RegexRouter\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"transforms.dropPrefix.regex\"</span>:<span class=\"string\">\"log_(.*)\"</span>,  <span class=\"comment\"># 丢弃topic名称部分</span></span><br><span class=\"line\">    <span class=\"string\">\"transforms.dropPrefix.replacement\"</span>:<span class=\"string\">\"$1\"</span>,  <span class=\"comment\"># 用什么代替丢弃的部分，这里表示，用正则出来的代替本来的，例如 name 代替 log_name</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"string\">\"batch.size\"</span>: <span class=\"number\">100</span>,  <span class=\"comment\"># 批量写es</span></span><br><span class=\"line\">    <span class=\"string\">\"max.buffered.records\"</span>: <span class=\"number\">1000</span>,  <span class=\"comment\"># 单个worker最高并发写es的数量</span></span><br><span class=\"line\">    <span class=\"string\">\"flush.timeout.ms\"</span>: <span class=\"number\">20000</span>  <span class=\"comment\"># 写es超时时间</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>connector会利用</p>\n<h4 id=\"注册连接\"><a href=\"#注册连接\" class=\"headerlink\" title=\"注册连接\"></a>注册连接</h4><h3 id=\"算法二：-交换shuffle-KNUTH-DURSTENFELD-SHUFFLE-算法\"><a href=\"#算法二：-交换shuffle-KNUTH-DURSTENFELD-SHUFFLE-算法\" class=\"headerlink\" title=\"算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法\"></a>算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法</h3><p>基本思路：在长度为n的列表，随机选择第k个元素，将第k个元素和第n个元素进行交换，接着再取随机取第j个元素和第n-1元素进行交换，一直循环。</p>\n<p><img src=\"/2020/06/09/log/kafka_to_es/image/swap.jpg\" alt=\"选择洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">swap_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> length &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, length)</span><br><span class=\"line\">        nums[index], nums[length<span class=\"number\">-1</span>] = nums[length<span class=\"number\">-1</span>], nums[index]</span><br><span class=\"line\">        length -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>\n<h3 id=\"算法三：-插入shuffle-INSIDE-OUT-SHUFFLE-算法\"><a href=\"#算法三：-插入shuffle-INSIDE-OUT-SHUFFLE-算法\" class=\"headerlink\" title=\"算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法\"></a>算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法</h3><p>基本思路：在长度为n的列表，从前向后遍历，在位置j时(j&gt;1), 随机在[0, j]随机选择第i个元素，然后将第i元素和第j个元素进行交换，一直循环。这种方式看上去就像插入(并不是插入)。</p>\n<p><img src=\"/2020/06/09/log/kafka_to_es/shuffle/insert.jpg\" alt=\"插入洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 从第2个元素向后遍历</span></span><br><span class=\"line\">    start = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> start &lt; length:</span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, start+<span class=\"number\">1</span>)</span><br><span class=\"line\">        nums[index], nums[start] = nums[start], nums[index]</span><br><span class=\"line\">        start += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>随着工作项目越来越多，并且由于未统一日志输出方式、是到文件、到控制台，各种类型到服务，如http，tcp等。发现日志越来越多，并发写入es的数量越来越多，导致es十分的不稳定，伴随着写入性能的堪忧，日志的丢失等等，各类服务需要写入重试的机制。最后，决定在引入中间件：kafka。</p>\n<h3 id=\"why-kafka\"><a href=\"#why-kafka\" class=\"headerlink\" title=\"why kafka?\"></a>why kafka?</h3><ol>\n<li><p>性能，kafka具有优秀的读写性能，极高的吞吐量。</p>\n</li>\n<li><p>支持批量处理</p>\n</li>\n<li><p>对于日志场景非常合适，logstash、filebeat等工具都直接支持kafka.</p>\n</li>\n</ol>\n<h3 id=\"同步工具\"><a href=\"#同步工具\" class=\"headerlink\" title=\"同步工具\"></a>同步工具</h3><ul>\n<li>logstash</li>\n<li>kafka connector</li>\n<li>自开发</li>\n</ul>\n<p>由于时间成本问题，自己开发这种没有考虑。剩下两种都尝试了。</p>\n<h3 id=\"kafka-connector\"><a href=\"#kafka-connector\" class=\"headerlink\" title=\"kafka connector\"></a>kafka connector</h3><p>第一次选型使用了这个connector, 主要是参考了网上的一些文章，觉得logstash可能不稳定，这个更好(实在太单纯)。当然了，既然踩过了坑，无论如何也要记录下来吧。或者是我使用方式不正确。<br>使用的是<a href=\"https://github.com/confluentinc/kafka-connect-elasticsearch\" target=\"_blank\" rel=\"noopener\">kafka-connect-elasticsearch</a></p>\n<h4 id=\"基本架构\"><a href=\"#基本架构\" class=\"headerlink\" title=\"基本架构\"></a>基本架构</h4><p><img src=\"/2020/06/09/log/kafka_to_es/connector.jpg\" alt=\"架构\"><br>将json数据直接发送kafka中，写入log_开头的topic: log_($index_name), 然后会在elasticsearch中生成一个$index_name。</p>\n<h4 id=\"部署connector\"><a href=\"#部署connector\" class=\"headerlink\" title=\"部署connector\"></a>部署connector</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 采用docker</span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">-p 8082:8082 \\</span><br><span class=\"line\">-e CONNECT_BOOTSTRAP_SERVERS=kafka_addr:9092 \\</span><br><span class=\"line\">-e CONNECT_REST_PORT=8082 \\</span><br><span class=\"line\">-e CONNECT_GROUP_ID=_connector_es \\</span><br><span class=\"line\">-e CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false \\</span><br><span class=\"line\">-e CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false \\</span><br><span class=\"line\">-e CONNECT_CONFIG_STORAGE_TOPIC=_connector-es-config \\</span><br><span class=\"line\">-e CONNECT_OFFSET_STORAGE_TOPIC=_connector-es-offset \\</span><br><span class=\"line\">-e CONNECT_STATUS_STORAGE_TOPIC=_connector-es-status \\</span><br><span class=\"line\">-e CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter \\</span><br><span class=\"line\">-e CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter \\</span><br><span class=\"line\">-e CONNECT_REST_ADVERTISED_HOST_NAME=kafka-connect \\</span><br><span class=\"line\">-e CONNECT_PLUGIN_PATH=/usr/share/java \\</span><br><span class=\"line\">confluentinc/cp-kafka-connect:latest</span><br></pre></td></tr></table></figure>\n<h4 id=\"注册连接器\"><a href=\"#注册连接器\" class=\"headerlink\" title=\"注册连接器\"></a>注册连接器</h4><p>连接器的文档查看官方文档。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># post http://#####/connectors/</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"es-sink\"</span>,  <span class=\"comment\"># connector名称</span></span><br><span class=\"line\">  <span class=\"string\">\"config\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"connector.class\"</span>: <span class=\"string\">\"io.confluent.connect.elasticsearch.ElasticsearchSinkConnector\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"tasks.max\"</span>: <span class=\"string\">\"3\"</span>,  <span class=\"comment\"># worker数量</span></span><br><span class=\"line\">    <span class=\"string\">\"topics.regex\"</span>: <span class=\"string\">\"log_(.*)\"</span>,  <span class=\"comment\"># 匹配kafka topic</span></span><br><span class=\"line\">    <span class=\"string\">\"key.ignore\"</span>: <span class=\"string\">\"true\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"schema.ignore\"</span>: <span class=\"string\">\"true\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"connection.url\"</span>: <span class=\"string\">\"http://#####:9200/\"</span>,  <span class=\"comment\"># es地址</span></span><br><span class=\"line\">    <span class=\"string\">\"type.name\"</span>: <span class=\"string\">\"\"</span>,  <span class=\"comment\"># 日志的_type名称，默认为_doc</span></span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"es-sink\"</span>,   <span class=\"comment\"># connector名称, 与外层connector同名</span></span><br><span class=\"line\">    <span class=\"string\">\"value.converter.schemas.enable\"</span>: <span class=\"string\">\"false\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"key.converter.schemas.enable\"</span>:<span class=\"string\">\"false\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"auto.create\"</span>: <span class=\"string\">\"true\"</span>, <span class=\"comment\"># 自动创建topic</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># 对topic进行正则后对策略</span></span><br><span class=\"line\">    <span class=\"string\">\"transforms\"</span>:<span class=\"string\">\"dropPrefix\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"transforms.dropPrefix.type\"</span>:<span class=\"string\">\"org.apache.kafka.connect.transforms.RegexRouter\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"transforms.dropPrefix.regex\"</span>:<span class=\"string\">\"log_(.*)\"</span>,  <span class=\"comment\"># 丢弃topic名称部分</span></span><br><span class=\"line\">    <span class=\"string\">\"transforms.dropPrefix.replacement\"</span>:<span class=\"string\">\"$1\"</span>,  <span class=\"comment\"># 用什么代替丢弃的部分，这里表示，用正则出来的代替本来的，例如 name 代替 log_name</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"string\">\"batch.size\"</span>: <span class=\"number\">100</span>,  <span class=\"comment\"># 批量写es</span></span><br><span class=\"line\">    <span class=\"string\">\"max.buffered.records\"</span>: <span class=\"number\">1000</span>,  <span class=\"comment\"># 单个worker最高并发写es的数量</span></span><br><span class=\"line\">    <span class=\"string\">\"flush.timeout.ms\"</span>: <span class=\"number\">20000</span>  <span class=\"comment\"># 写es超时时间</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>connector会利用</p>\n<h4 id=\"注册连接\"><a href=\"#注册连接\" class=\"headerlink\" title=\"注册连接\"></a>注册连接</h4><h3 id=\"算法二：-交换shuffle-KNUTH-DURSTENFELD-SHUFFLE-算法\"><a href=\"#算法二：-交换shuffle-KNUTH-DURSTENFELD-SHUFFLE-算法\" class=\"headerlink\" title=\"算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法\"></a>算法二：(交换shuffle)KNUTH-DURSTENFELD SHUFFLE 算法</h3><p>基本思路：在长度为n的列表，随机选择第k个元素，将第k个元素和第n个元素进行交换，接着再取随机取第j个元素和第n-1元素进行交换，一直循环。</p>\n<p><img src=\"/2020/06/09/log/kafka_to_es/image/swap.jpg\" alt=\"选择洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">swap_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> length &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, length)</span><br><span class=\"line\">        nums[index], nums[length<span class=\"number\">-1</span>] = nums[length<span class=\"number\">-1</span>], nums[index]</span><br><span class=\"line\">        length -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>\n<h3 id=\"算法三：-插入shuffle-INSIDE-OUT-SHUFFLE-算法\"><a href=\"#算法三：-插入shuffle-INSIDE-OUT-SHUFFLE-算法\" class=\"headerlink\" title=\"算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法\"></a>算法三：(插入shuffle)INSIDE-OUT SHUFFLE 算法</h3><p>基本思路：在长度为n的列表，从前向后遍历，在位置j时(j&gt;1), 随机在[0, j]随机选择第i个元素，然后将第i元素和第j个元素进行交换，一直循环。这种方式看上去就像插入(并不是插入)。</p>\n<p><img src=\"/2020/06/09/log/kafka_to_es/shuffle/insert.jpg\" alt=\"插入洗牌\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_shuffle</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">    length = len(nums)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 从第2个元素向后遍历</span></span><br><span class=\"line\">    start = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> start &lt; length:</span><br><span class=\"line\">        index = random.randrange(<span class=\"number\">0</span>, start+<span class=\"number\">1</span>)</span><br><span class=\"line\">        nums[index], nums[start] = nums[start], nums[index]</span><br><span class=\"line\">        start += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>时间复杂度：O(n)<br>空间复杂度：O(1)</p>\n"},{"title":"三月日记","_content":"\n\n#### 3月18日\n\n  今天是正式加入cvte的一天，感觉一切都挺好的，良好的办公环境，饭堂，同事，薪资虽然不算高，但自己也能接受。\n  第一个要做的是服务器端的监控程序，虽然这和后端开发的工作也能有所出入。\n  但自己也能接受，毕竟又能增加自己的知识了，例如docker，集群，分布式，数据库。\n  一开始确实没什么思路，google一下，了解了一下当前的监控软件，zabbix, nagios等，感觉都不符合我们的需求。请教了隔壁同事，于是投入了prometheus+grafana的坑里。\n  晚上重新购买了云服务器(阿里云好贵，华为云真的是xx)，简单的搭了个docker的服务\n\n#### 3月19日\n```python\n\n\"\"\"\n正式开始工作啦！\n首先是学习了一下docker:\n学习到：\n 1. docker ps (-a)\n 2. docker rm container\n 3. docker logs -f -t --tail 10 contailer # 日志\n 4. docker run \n 5. docker stop/restart/start container\n待学习： \n 1. docker和虚拟机的区别(还需要加强理解！！)\n 2. docker挂载问题，尤其是mac问题\n 3. docker相关的文件位置知识\n接着是prometheus：\n学习到：\n 1. prometheus的基本框架\n 2. 简单的exporter的功能，例如node_exporter, cadvisor\n待学习：\n 1. 时序型数据库知识\n 2. 整个prometheus的基本框架工作流程\n最后是grafana:\n学习到：\n 1. grafana的基本使用\n 2. dash的使用\n待学习： 完整了解整个过程\n\n总的来说：\n 今天主要完成了一个docker+prometheus+grafana的简单demo运行，学习docker相关知识。\n 但还有一系列的问题需要考虑，如gpu如何监控，docker监控exporter(cadvisor）有些宿主机数据无法读取问题，\n 还有一些挂载的问题，性能问题考虑，数据库数据量问题，感觉是个漫长过程，但需要一步步的努力！\n\"\"\"\n\n```\n\n#### 3月20日\n\n```python\n\"\"\"\n今天的主要工作是完善prometheus+grafana的demo，大致了解grafana的使用方式，dashboard的配置和方法。\n尝试了很多开源的模版，发现由于一些作者可能不再进行维护，直接使用需要修改很多操作。以及修复了docker时间不同步的问题。\n知识巩固：\n 1. docker exec -it container command # 在docker中执行某个命令\n 2. docker exec -it container /bin/sh # 进入docker bash界面\n 3. docker exec -u root ... # 可以以root用户进入docker docker用户默认是nobody\n 4. docker时间同步：\n  a. 启动挂载： docker run -v /etc/localtime container:/etc/localtime\n  b. 拷贝： sudo docker cp /etc/localtime container:/etc/localtime # 可能localhost链接的文件也需要进行拷贝。\n 5. grafana的问题暂时不说了，一知半解真的不行。。\n\n问题问题：\n 1. mac的docker挂载问题是个谜啊！！！\n 2. 昨天的内容还没来的及了解\n\"\"\"\n```\n\n#### 3月21日\n\n```python\n\"\"\"\n今天的主要工作还是完善prometheus+grafana的demo，写了cadvisor的启动文档查阅了一下gpu监控的方式。\n算是基本掌握了grafana的配置方法，了解node_export和cadvisor返回的数值以及一些计算方式。\n总的来说，进度还是有点慢！！\n\n知识巩固：\n 1. linux系统负载概念，指的是过去x秒平均每年在排队等待cpu执行的进程，不包括那些进入io等待或者主动发起等待的程序，当系统负载/cpu数量<3 才认为系统负载合理。\n 2. top看到的是逻辑上的cpu数量，也就是物理cpu数量xcores, 实际上如果支持超线程，逻辑cpu应该还需要x2, 或者说支持cpu x core x 2的线程数\n问题问题：\n 1. 整个系统需要了解\n\"\"\"\n```\n\n\n\n\n#### 3月22日\n\n```python\n\"\"\"\n啊啊啊，偷懒了2天，今天才补上周五的日志啊。\n\n今天的主要工作还是完善prometheus+grafana的demo，尝试了一些方法把gpu监控集成进去，\nnvidia_gpu_export还算顺利部署，也在brafana成功显示出来了\n发现cadvisor部署时感觉系统卡顿，初步推测时磁盘io，感觉网络IO的可能性特别小。集成gpu进去也失败了。\n还写了一些文档。\n\n知识巩固\n\t1. 远程相关，把相关信息记载在ssh_config，然后以后就方便ssh.\n\"\"\"\n```\n\n\n#### 3月25日\n\n```python\n\"\"\"\n今天的主要工作是把prometheus和grafana服务放到了服务器上，并且通过加入一些挂载使得cadvisor不会卡顿，目前看来效果还可以。\n另外一个就是把docker GPU集成到cadvisor，花了一下午+晚上的时间，尝试了很多方法，最后终于成功了。\n主要问题在于自己阅读官方文档时，一知半解就过了，发现原来没读懂，把nvml的库文件位置挂载错误。\n另外cadvisor最新的v0.32.0启动时竟然没有打印日志。。血坑。\n\n知识巩固\n\t1. linux命令iostat可以查看磁盘io，iostat 2, 3 # 表示2刷新一次，执行3次。\n\"\"\"\n```\n\n\n","source":"_posts/diary/2019/march.md","raw":"---\ntitle: 三月日记\ntags:\n\t- 日记\ncategories:\n\t- 日记\n---\n\n\n#### 3月18日\n\n  今天是正式加入cvte的一天，感觉一切都挺好的，良好的办公环境，饭堂，同事，薪资虽然不算高，但自己也能接受。\n  第一个要做的是服务器端的监控程序，虽然这和后端开发的工作也能有所出入。\n  但自己也能接受，毕竟又能增加自己的知识了，例如docker，集群，分布式，数据库。\n  一开始确实没什么思路，google一下，了解了一下当前的监控软件，zabbix, nagios等，感觉都不符合我们的需求。请教了隔壁同事，于是投入了prometheus+grafana的坑里。\n  晚上重新购买了云服务器(阿里云好贵，华为云真的是xx)，简单的搭了个docker的服务\n\n#### 3月19日\n```python\n\n\"\"\"\n正式开始工作啦！\n首先是学习了一下docker:\n学习到：\n 1. docker ps (-a)\n 2. docker rm container\n 3. docker logs -f -t --tail 10 contailer # 日志\n 4. docker run \n 5. docker stop/restart/start container\n待学习： \n 1. docker和虚拟机的区别(还需要加强理解！！)\n 2. docker挂载问题，尤其是mac问题\n 3. docker相关的文件位置知识\n接着是prometheus：\n学习到：\n 1. prometheus的基本框架\n 2. 简单的exporter的功能，例如node_exporter, cadvisor\n待学习：\n 1. 时序型数据库知识\n 2. 整个prometheus的基本框架工作流程\n最后是grafana:\n学习到：\n 1. grafana的基本使用\n 2. dash的使用\n待学习： 完整了解整个过程\n\n总的来说：\n 今天主要完成了一个docker+prometheus+grafana的简单demo运行，学习docker相关知识。\n 但还有一系列的问题需要考虑，如gpu如何监控，docker监控exporter(cadvisor）有些宿主机数据无法读取问题，\n 还有一些挂载的问题，性能问题考虑，数据库数据量问题，感觉是个漫长过程，但需要一步步的努力！\n\"\"\"\n\n```\n\n#### 3月20日\n\n```python\n\"\"\"\n今天的主要工作是完善prometheus+grafana的demo，大致了解grafana的使用方式，dashboard的配置和方法。\n尝试了很多开源的模版，发现由于一些作者可能不再进行维护，直接使用需要修改很多操作。以及修复了docker时间不同步的问题。\n知识巩固：\n 1. docker exec -it container command # 在docker中执行某个命令\n 2. docker exec -it container /bin/sh # 进入docker bash界面\n 3. docker exec -u root ... # 可以以root用户进入docker docker用户默认是nobody\n 4. docker时间同步：\n  a. 启动挂载： docker run -v /etc/localtime container:/etc/localtime\n  b. 拷贝： sudo docker cp /etc/localtime container:/etc/localtime # 可能localhost链接的文件也需要进行拷贝。\n 5. grafana的问题暂时不说了，一知半解真的不行。。\n\n问题问题：\n 1. mac的docker挂载问题是个谜啊！！！\n 2. 昨天的内容还没来的及了解\n\"\"\"\n```\n\n#### 3月21日\n\n```python\n\"\"\"\n今天的主要工作还是完善prometheus+grafana的demo，写了cadvisor的启动文档查阅了一下gpu监控的方式。\n算是基本掌握了grafana的配置方法，了解node_export和cadvisor返回的数值以及一些计算方式。\n总的来说，进度还是有点慢！！\n\n知识巩固：\n 1. linux系统负载概念，指的是过去x秒平均每年在排队等待cpu执行的进程，不包括那些进入io等待或者主动发起等待的程序，当系统负载/cpu数量<3 才认为系统负载合理。\n 2. top看到的是逻辑上的cpu数量，也就是物理cpu数量xcores, 实际上如果支持超线程，逻辑cpu应该还需要x2, 或者说支持cpu x core x 2的线程数\n问题问题：\n 1. 整个系统需要了解\n\"\"\"\n```\n\n\n\n\n#### 3月22日\n\n```python\n\"\"\"\n啊啊啊，偷懒了2天，今天才补上周五的日志啊。\n\n今天的主要工作还是完善prometheus+grafana的demo，尝试了一些方法把gpu监控集成进去，\nnvidia_gpu_export还算顺利部署，也在brafana成功显示出来了\n发现cadvisor部署时感觉系统卡顿，初步推测时磁盘io，感觉网络IO的可能性特别小。集成gpu进去也失败了。\n还写了一些文档。\n\n知识巩固\n\t1. 远程相关，把相关信息记载在ssh_config，然后以后就方便ssh.\n\"\"\"\n```\n\n\n#### 3月25日\n\n```python\n\"\"\"\n今天的主要工作是把prometheus和grafana服务放到了服务器上，并且通过加入一些挂载使得cadvisor不会卡顿，目前看来效果还可以。\n另外一个就是把docker GPU集成到cadvisor，花了一下午+晚上的时间，尝试了很多方法，最后终于成功了。\n主要问题在于自己阅读官方文档时，一知半解就过了，发现原来没读懂，把nvml的库文件位置挂载错误。\n另外cadvisor最新的v0.32.0启动时竟然没有打印日志。。血坑。\n\n知识巩固\n\t1. linux命令iostat可以查看磁盘io，iostat 2, 3 # 表示2刷新一次，执行3次。\n\"\"\"\n```\n\n\n","slug":"diary/2019/march","published":1,"date":"2019-03-19T15:50:03.527Z","updated":"2019-03-25T15:57:52.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2c10002srlx38aetza7o","content":"<h4 id=\"3月18日\"><a href=\"#3月18日\" class=\"headerlink\" title=\"3月18日\"></a>3月18日</h4><p>  今天是正式加入cvte的一天，感觉一切都挺好的，良好的办公环境，饭堂，同事，薪资虽然不算高，但自己也能接受。<br>  第一个要做的是服务器端的监控程序，虽然这和后端开发的工作也能有所出入。<br>  但自己也能接受，毕竟又能增加自己的知识了，例如docker，集群，分布式，数据库。<br>  一开始确实没什么思路，google一下，了解了一下当前的监控软件，zabbix, nagios等，感觉都不符合我们的需求。请教了隔壁同事，于是投入了prometheus+grafana的坑里。<br>  晚上重新购买了云服务器(阿里云好贵，华为云真的是xx)，简单的搭了个docker的服务</p>\n<h4 id=\"3月19日\"><a href=\"#3月19日\" class=\"headerlink\" title=\"3月19日\"></a>3月19日</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">正式开始工作啦！</span></span><br><span class=\"line\"><span class=\"string\">首先是学习了一下docker:</span></span><br><span class=\"line\"><span class=\"string\">学习到：</span></span><br><span class=\"line\"><span class=\"string\"> 1. docker ps (-a)</span></span><br><span class=\"line\"><span class=\"string\"> 2. docker rm container</span></span><br><span class=\"line\"><span class=\"string\"> 3. docker logs -f -t --tail 10 contailer # 日志</span></span><br><span class=\"line\"><span class=\"string\"> 4. docker run </span></span><br><span class=\"line\"><span class=\"string\"> 5. docker stop/restart/start container</span></span><br><span class=\"line\"><span class=\"string\">待学习： </span></span><br><span class=\"line\"><span class=\"string\"> 1. docker和虚拟机的区别(还需要加强理解！！)</span></span><br><span class=\"line\"><span class=\"string\"> 2. docker挂载问题，尤其是mac问题</span></span><br><span class=\"line\"><span class=\"string\"> 3. docker相关的文件位置知识</span></span><br><span class=\"line\"><span class=\"string\">接着是prometheus：</span></span><br><span class=\"line\"><span class=\"string\">学习到：</span></span><br><span class=\"line\"><span class=\"string\"> 1. prometheus的基本框架</span></span><br><span class=\"line\"><span class=\"string\"> 2. 简单的exporter的功能，例如node_exporter, cadvisor</span></span><br><span class=\"line\"><span class=\"string\">待学习：</span></span><br><span class=\"line\"><span class=\"string\"> 1. 时序型数据库知识</span></span><br><span class=\"line\"><span class=\"string\"> 2. 整个prometheus的基本框架工作流程</span></span><br><span class=\"line\"><span class=\"string\">最后是grafana:</span></span><br><span class=\"line\"><span class=\"string\">学习到：</span></span><br><span class=\"line\"><span class=\"string\"> 1. grafana的基本使用</span></span><br><span class=\"line\"><span class=\"string\"> 2. dash的使用</span></span><br><span class=\"line\"><span class=\"string\">待学习： 完整了解整个过程</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">总的来说：</span></span><br><span class=\"line\"><span class=\"string\"> 今天主要完成了一个docker+prometheus+grafana的简单demo运行，学习docker相关知识。</span></span><br><span class=\"line\"><span class=\"string\"> 但还有一系列的问题需要考虑，如gpu如何监控，docker监控exporter(cadvisor）有些宿主机数据无法读取问题，</span></span><br><span class=\"line\"><span class=\"string\"> 还有一些挂载的问题，性能问题考虑，数据库数据量问题，感觉是个漫长过程，但需要一步步的努力！</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3月20日\"><a href=\"#3月20日\" class=\"headerlink\" title=\"3月20日\"></a>3月20日</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">今天的主要工作是完善prometheus+grafana的demo，大致了解grafana的使用方式，dashboard的配置和方法。</span></span><br><span class=\"line\"><span class=\"string\">尝试了很多开源的模版，发现由于一些作者可能不再进行维护，直接使用需要修改很多操作。以及修复了docker时间不同步的问题。</span></span><br><span class=\"line\"><span class=\"string\">知识巩固：</span></span><br><span class=\"line\"><span class=\"string\"> 1. docker exec -it container command # 在docker中执行某个命令</span></span><br><span class=\"line\"><span class=\"string\"> 2. docker exec -it container /bin/sh # 进入docker bash界面</span></span><br><span class=\"line\"><span class=\"string\"> 3. docker exec -u root ... # 可以以root用户进入docker docker用户默认是nobody</span></span><br><span class=\"line\"><span class=\"string\"> 4. docker时间同步：</span></span><br><span class=\"line\"><span class=\"string\">  a. 启动挂载： docker run -v /etc/localtime container:/etc/localtime</span></span><br><span class=\"line\"><span class=\"string\">  b. 拷贝： sudo docker cp /etc/localtime container:/etc/localtime # 可能localhost链接的文件也需要进行拷贝。</span></span><br><span class=\"line\"><span class=\"string\"> 5. grafana的问题暂时不说了，一知半解真的不行。。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">问题问题：</span></span><br><span class=\"line\"><span class=\"string\"> 1. mac的docker挂载问题是个谜啊！！！</span></span><br><span class=\"line\"><span class=\"string\"> 2. 昨天的内容还没来的及了解</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3月21日\"><a href=\"#3月21日\" class=\"headerlink\" title=\"3月21日\"></a>3月21日</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">今天的主要工作还是完善prometheus+grafana的demo，写了cadvisor的启动文档查阅了一下gpu监控的方式。</span></span><br><span class=\"line\"><span class=\"string\">算是基本掌握了grafana的配置方法，了解node_export和cadvisor返回的数值以及一些计算方式。</span></span><br><span class=\"line\"><span class=\"string\">总的来说，进度还是有点慢！！</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">知识巩固：</span></span><br><span class=\"line\"><span class=\"string\"> 1. linux系统负载概念，指的是过去x秒平均每年在排队等待cpu执行的进程，不包括那些进入io等待或者主动发起等待的程序，当系统负载/cpu数量&lt;3 才认为系统负载合理。</span></span><br><span class=\"line\"><span class=\"string\"> 2. top看到的是逻辑上的cpu数量，也就是物理cpu数量xcores, 实际上如果支持超线程，逻辑cpu应该还需要x2, 或者说支持cpu x core x 2的线程数</span></span><br><span class=\"line\"><span class=\"string\">问题问题：</span></span><br><span class=\"line\"><span class=\"string\"> 1. 整个系统需要了解</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3月22日\"><a href=\"#3月22日\" class=\"headerlink\" title=\"3月22日\"></a>3月22日</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">啊啊啊，偷懒了2天，今天才补上周五的日志啊。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">今天的主要工作还是完善prometheus+grafana的demo，尝试了一些方法把gpu监控集成进去，</span></span><br><span class=\"line\"><span class=\"string\">nvidia_gpu_export还算顺利部署，也在brafana成功显示出来了</span></span><br><span class=\"line\"><span class=\"string\">发现cadvisor部署时感觉系统卡顿，初步推测时磁盘io，感觉网络IO的可能性特别小。集成gpu进去也失败了。</span></span><br><span class=\"line\"><span class=\"string\">还写了一些文档。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">知识巩固</span></span><br><span class=\"line\"><span class=\"string\">\t1. 远程相关，把相关信息记载在ssh_config，然后以后就方便ssh.</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3月25日\"><a href=\"#3月25日\" class=\"headerlink\" title=\"3月25日\"></a>3月25日</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">今天的主要工作是把prometheus和grafana服务放到了服务器上，并且通过加入一些挂载使得cadvisor不会卡顿，目前看来效果还可以。</span></span><br><span class=\"line\"><span class=\"string\">另外一个就是把docker GPU集成到cadvisor，花了一下午+晚上的时间，尝试了很多方法，最后终于成功了。</span></span><br><span class=\"line\"><span class=\"string\">主要问题在于自己阅读官方文档时，一知半解就过了，发现原来没读懂，把nvml的库文件位置挂载错误。</span></span><br><span class=\"line\"><span class=\"string\">另外cadvisor最新的v0.32.0启动时竟然没有打印日志。。血坑。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">知识巩固</span></span><br><span class=\"line\"><span class=\"string\">\t1. linux命令iostat可以查看磁盘io，iostat 2, 3 # 表示2刷新一次，执行3次。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"3月18日\"><a href=\"#3月18日\" class=\"headerlink\" title=\"3月18日\"></a>3月18日</h4><p>  今天是正式加入cvte的一天，感觉一切都挺好的，良好的办公环境，饭堂，同事，薪资虽然不算高，但自己也能接受。<br>  第一个要做的是服务器端的监控程序，虽然这和后端开发的工作也能有所出入。<br>  但自己也能接受，毕竟又能增加自己的知识了，例如docker，集群，分布式，数据库。<br>  一开始确实没什么思路，google一下，了解了一下当前的监控软件，zabbix, nagios等，感觉都不符合我们的需求。请教了隔壁同事，于是投入了prometheus+grafana的坑里。<br>  晚上重新购买了云服务器(阿里云好贵，华为云真的是xx)，简单的搭了个docker的服务</p>\n<h4 id=\"3月19日\"><a href=\"#3月19日\" class=\"headerlink\" title=\"3月19日\"></a>3月19日</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">正式开始工作啦！</span></span><br><span class=\"line\"><span class=\"string\">首先是学习了一下docker:</span></span><br><span class=\"line\"><span class=\"string\">学习到：</span></span><br><span class=\"line\"><span class=\"string\"> 1. docker ps (-a)</span></span><br><span class=\"line\"><span class=\"string\"> 2. docker rm container</span></span><br><span class=\"line\"><span class=\"string\"> 3. docker logs -f -t --tail 10 contailer # 日志</span></span><br><span class=\"line\"><span class=\"string\"> 4. docker run </span></span><br><span class=\"line\"><span class=\"string\"> 5. docker stop/restart/start container</span></span><br><span class=\"line\"><span class=\"string\">待学习： </span></span><br><span class=\"line\"><span class=\"string\"> 1. docker和虚拟机的区别(还需要加强理解！！)</span></span><br><span class=\"line\"><span class=\"string\"> 2. docker挂载问题，尤其是mac问题</span></span><br><span class=\"line\"><span class=\"string\"> 3. docker相关的文件位置知识</span></span><br><span class=\"line\"><span class=\"string\">接着是prometheus：</span></span><br><span class=\"line\"><span class=\"string\">学习到：</span></span><br><span class=\"line\"><span class=\"string\"> 1. prometheus的基本框架</span></span><br><span class=\"line\"><span class=\"string\"> 2. 简单的exporter的功能，例如node_exporter, cadvisor</span></span><br><span class=\"line\"><span class=\"string\">待学习：</span></span><br><span class=\"line\"><span class=\"string\"> 1. 时序型数据库知识</span></span><br><span class=\"line\"><span class=\"string\"> 2. 整个prometheus的基本框架工作流程</span></span><br><span class=\"line\"><span class=\"string\">最后是grafana:</span></span><br><span class=\"line\"><span class=\"string\">学习到：</span></span><br><span class=\"line\"><span class=\"string\"> 1. grafana的基本使用</span></span><br><span class=\"line\"><span class=\"string\"> 2. dash的使用</span></span><br><span class=\"line\"><span class=\"string\">待学习： 完整了解整个过程</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">总的来说：</span></span><br><span class=\"line\"><span class=\"string\"> 今天主要完成了一个docker+prometheus+grafana的简单demo运行，学习docker相关知识。</span></span><br><span class=\"line\"><span class=\"string\"> 但还有一系列的问题需要考虑，如gpu如何监控，docker监控exporter(cadvisor）有些宿主机数据无法读取问题，</span></span><br><span class=\"line\"><span class=\"string\"> 还有一些挂载的问题，性能问题考虑，数据库数据量问题，感觉是个漫长过程，但需要一步步的努力！</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3月20日\"><a href=\"#3月20日\" class=\"headerlink\" title=\"3月20日\"></a>3月20日</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">今天的主要工作是完善prometheus+grafana的demo，大致了解grafana的使用方式，dashboard的配置和方法。</span></span><br><span class=\"line\"><span class=\"string\">尝试了很多开源的模版，发现由于一些作者可能不再进行维护，直接使用需要修改很多操作。以及修复了docker时间不同步的问题。</span></span><br><span class=\"line\"><span class=\"string\">知识巩固：</span></span><br><span class=\"line\"><span class=\"string\"> 1. docker exec -it container command # 在docker中执行某个命令</span></span><br><span class=\"line\"><span class=\"string\"> 2. docker exec -it container /bin/sh # 进入docker bash界面</span></span><br><span class=\"line\"><span class=\"string\"> 3. docker exec -u root ... # 可以以root用户进入docker docker用户默认是nobody</span></span><br><span class=\"line\"><span class=\"string\"> 4. docker时间同步：</span></span><br><span class=\"line\"><span class=\"string\">  a. 启动挂载： docker run -v /etc/localtime container:/etc/localtime</span></span><br><span class=\"line\"><span class=\"string\">  b. 拷贝： sudo docker cp /etc/localtime container:/etc/localtime # 可能localhost链接的文件也需要进行拷贝。</span></span><br><span class=\"line\"><span class=\"string\"> 5. grafana的问题暂时不说了，一知半解真的不行。。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">问题问题：</span></span><br><span class=\"line\"><span class=\"string\"> 1. mac的docker挂载问题是个谜啊！！！</span></span><br><span class=\"line\"><span class=\"string\"> 2. 昨天的内容还没来的及了解</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3月21日\"><a href=\"#3月21日\" class=\"headerlink\" title=\"3月21日\"></a>3月21日</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">今天的主要工作还是完善prometheus+grafana的demo，写了cadvisor的启动文档查阅了一下gpu监控的方式。</span></span><br><span class=\"line\"><span class=\"string\">算是基本掌握了grafana的配置方法，了解node_export和cadvisor返回的数值以及一些计算方式。</span></span><br><span class=\"line\"><span class=\"string\">总的来说，进度还是有点慢！！</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">知识巩固：</span></span><br><span class=\"line\"><span class=\"string\"> 1. linux系统负载概念，指的是过去x秒平均每年在排队等待cpu执行的进程，不包括那些进入io等待或者主动发起等待的程序，当系统负载/cpu数量&lt;3 才认为系统负载合理。</span></span><br><span class=\"line\"><span class=\"string\"> 2. top看到的是逻辑上的cpu数量，也就是物理cpu数量xcores, 实际上如果支持超线程，逻辑cpu应该还需要x2, 或者说支持cpu x core x 2的线程数</span></span><br><span class=\"line\"><span class=\"string\">问题问题：</span></span><br><span class=\"line\"><span class=\"string\"> 1. 整个系统需要了解</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3月22日\"><a href=\"#3月22日\" class=\"headerlink\" title=\"3月22日\"></a>3月22日</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">啊啊啊，偷懒了2天，今天才补上周五的日志啊。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">今天的主要工作还是完善prometheus+grafana的demo，尝试了一些方法把gpu监控集成进去，</span></span><br><span class=\"line\"><span class=\"string\">nvidia_gpu_export还算顺利部署，也在brafana成功显示出来了</span></span><br><span class=\"line\"><span class=\"string\">发现cadvisor部署时感觉系统卡顿，初步推测时磁盘io，感觉网络IO的可能性特别小。集成gpu进去也失败了。</span></span><br><span class=\"line\"><span class=\"string\">还写了一些文档。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">知识巩固</span></span><br><span class=\"line\"><span class=\"string\">\t1. 远程相关，把相关信息记载在ssh_config，然后以后就方便ssh.</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3月25日\"><a href=\"#3月25日\" class=\"headerlink\" title=\"3月25日\"></a>3月25日</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">今天的主要工作是把prometheus和grafana服务放到了服务器上，并且通过加入一些挂载使得cadvisor不会卡顿，目前看来效果还可以。</span></span><br><span class=\"line\"><span class=\"string\">另外一个就是把docker GPU集成到cadvisor，花了一下午+晚上的时间，尝试了很多方法，最后终于成功了。</span></span><br><span class=\"line\"><span class=\"string\">主要问题在于自己阅读官方文档时，一知半解就过了，发现原来没读懂，把nvml的库文件位置挂载错误。</span></span><br><span class=\"line\"><span class=\"string\">另外cadvisor最新的v0.32.0启动时竟然没有打印日志。。血坑。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">知识巩固</span></span><br><span class=\"line\"><span class=\"string\">\t1. linux命令iostat可以查看磁盘io，iostat 2, 3 # 表示2刷新一次，执行3次。</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n"},{"title":"MINIO GoLang SDK","_content":"\n## golang minio sdk \n\n本篇主要是GoLang SDK基本使用 \n\n##### 安装\n\n    go get -u github.com/minio/minio-go\n\n##### 连接minio\n\n```go\n\nimport (\n    \"github.com/minio/minio-go\"\n    \"log\"\n)\n\nconst (\n    minioHost = \"127.0.0.1:9000\"\n    minioAccessKeyID = \"admin\"\n    minioSecretAccessKey = \"123456\"\n)\n\nfunc MinioGetClient() *minio.Client, err {\n        // 初使化 minio client对象。\n    minioClient, err := minio.New(\n        minioHost, minioAccessKeyID, minioSecretAccessKey, false)\n    if err != nil {\n        log.Fatalln(err)\n\n    return minioClient, err\n}\n\n```\n##### 创建bucket\n```go\n\nfunc MinioMakeBucket(bucketName string, readonly bool) (bool, error) {\n\t// 创建存储桶。\n\tcli := MinioGetClient() //这个函数来自上面定义\n\n    // 先判断是否桶存在\n    exists, err := cli.BucketExists(bucketName)\n    \n    if err != nil {\n        log.Fatalln(err)\n        return false, err\n    }\n\n    if exists {\n        log.Printf(\"Bucket %s has already created\\n\", bucketName)\n        return true, nil\n    }\n\n    err = minioClient.MakeBucket(bucketName, \"cn-north-1\")\n    if err ！= nil {\n        log.Printf(\"Bucket %s created failed\\n\", bucketName)\n        return false, err\n    } \n    \n    return true, nil\n}\n```\n\n##### 将bucket设置为全局可读\n```go\nfunc MinioMakeBucketAllReadOnly(bucketName string) error {   \n\n    cli := MinioGetClient()\n\n    readOnlyPolicy := `{\"Version\": \"2012-10-17\",\"Statement\": [{\"Action\": [\"s3:GetObject\"],\"Effect\": \"Allow\",\"Principal\": {\"AWS\": [\"*\"]},\"Resource\": [\"arn:aws:s3:::`\n    readOnlyPolicy += bucketName\n    readOnlyPolicy += `/*\"],\"Sid\": \"\"}]}`\n\n    err := minioClient.SetBucketPolicy(bucketName, readOnlyPolicy)\n    if err != nil {\n        log.Println(err)\n    }\n    return err\n}\n```\n\n\n##### 上传图片\n\n```go\n\nfunc MinioPutObject(buckName string, filename string, reader io.Reader) error {\n\t\n    _, err = MinioGetClient().PutObject(buckName, filename, reader, reader.Size(), minio.PutObjectOptions{ContentType: \"application/octet-stream\"})\n    return err\n}\n```\n很多时候我们是直接接受到字节流，然后把字节流传输到minio中，先把数据流转换成io流\n\n```go\nimport (\n    \"bytes\"\n    \"io\"\n)\nfunc byte2Reader(b []byte) io.Reader {\n    return bytes.NewReader(b)\n}\n```","source":"_posts/go/minio/sdk.md","raw":"---\ntitle: MINIO GoLang SDK\ntags:\n\t- go\n\t- minio\ncategories:\n\t- go\n\t- minio\n---\n\n## golang minio sdk \n\n本篇主要是GoLang SDK基本使用 \n\n##### 安装\n\n    go get -u github.com/minio/minio-go\n\n##### 连接minio\n\n```go\n\nimport (\n    \"github.com/minio/minio-go\"\n    \"log\"\n)\n\nconst (\n    minioHost = \"127.0.0.1:9000\"\n    minioAccessKeyID = \"admin\"\n    minioSecretAccessKey = \"123456\"\n)\n\nfunc MinioGetClient() *minio.Client, err {\n        // 初使化 minio client对象。\n    minioClient, err := minio.New(\n        minioHost, minioAccessKeyID, minioSecretAccessKey, false)\n    if err != nil {\n        log.Fatalln(err)\n\n    return minioClient, err\n}\n\n```\n##### 创建bucket\n```go\n\nfunc MinioMakeBucket(bucketName string, readonly bool) (bool, error) {\n\t// 创建存储桶。\n\tcli := MinioGetClient() //这个函数来自上面定义\n\n    // 先判断是否桶存在\n    exists, err := cli.BucketExists(bucketName)\n    \n    if err != nil {\n        log.Fatalln(err)\n        return false, err\n    }\n\n    if exists {\n        log.Printf(\"Bucket %s has already created\\n\", bucketName)\n        return true, nil\n    }\n\n    err = minioClient.MakeBucket(bucketName, \"cn-north-1\")\n    if err ！= nil {\n        log.Printf(\"Bucket %s created failed\\n\", bucketName)\n        return false, err\n    } \n    \n    return true, nil\n}\n```\n\n##### 将bucket设置为全局可读\n```go\nfunc MinioMakeBucketAllReadOnly(bucketName string) error {   \n\n    cli := MinioGetClient()\n\n    readOnlyPolicy := `{\"Version\": \"2012-10-17\",\"Statement\": [{\"Action\": [\"s3:GetObject\"],\"Effect\": \"Allow\",\"Principal\": {\"AWS\": [\"*\"]},\"Resource\": [\"arn:aws:s3:::`\n    readOnlyPolicy += bucketName\n    readOnlyPolicy += `/*\"],\"Sid\": \"\"}]}`\n\n    err := minioClient.SetBucketPolicy(bucketName, readOnlyPolicy)\n    if err != nil {\n        log.Println(err)\n    }\n    return err\n}\n```\n\n\n##### 上传图片\n\n```go\n\nfunc MinioPutObject(buckName string, filename string, reader io.Reader) error {\n\t\n    _, err = MinioGetClient().PutObject(buckName, filename, reader, reader.Size(), minio.PutObjectOptions{ContentType: \"application/octet-stream\"})\n    return err\n}\n```\n很多时候我们是直接接受到字节流，然后把字节流传输到minio中，先把数据流转换成io流\n\n```go\nimport (\n    \"bytes\"\n    \"io\"\n)\nfunc byte2Reader(b []byte) io.Reader {\n    return bytes.NewReader(b)\n}\n```","slug":"go/minio/sdk","published":1,"date":"2019-07-17T15:14:48.794Z","updated":"2019-07-18T15:26:09.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2c11002trlx37m3lyrme","content":"<h2 id=\"golang-minio-sdk\"><a href=\"#golang-minio-sdk\" class=\"headerlink\" title=\"golang minio sdk\"></a>golang minio sdk</h2><p>本篇主要是GoLang SDK基本使用 </p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><pre><code>go get -u github.com/minio/minio-go\n</code></pre><h5 id=\"连接minio\"><a href=\"#连接minio\" class=\"headerlink\" title=\"连接minio\"></a>连接minio</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"github.com/minio/minio-go\"</span></span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    minioHost = <span class=\"string\">\"127.0.0.1:9000\"</span></span><br><span class=\"line\">    minioAccessKeyID = <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">    minioSecretAccessKey = <span class=\"string\">\"123456\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MinioGetClient</span><span class=\"params\">()</span> *<span class=\"title\">minio</span>.<span class=\"title\">Client</span>, <span class=\"title\">err</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初使化 minio client对象。</span></span><br><span class=\"line\">    minioClient, err := minio.New(</span><br><span class=\"line\">        minioHost, minioAccessKeyID, minioSecretAccessKey, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatalln(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> minioClient, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建bucket\"><a href=\"#创建bucket\" class=\"headerlink\" title=\"创建bucket\"></a>创建bucket</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MinioMakeBucket</span><span class=\"params\">(bucketName <span class=\"keyword\">string</span>, readonly <span class=\"keyword\">bool</span>)</span> <span class=\"params\">(<span class=\"keyword\">bool</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建存储桶。</span></span><br><span class=\"line\">\tcli := MinioGetClient() <span class=\"comment\">//这个函数来自上面定义</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 先判断是否桶存在</span></span><br><span class=\"line\">    exists, err := cli.BucketExists(bucketName)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatalln(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> exists &#123;</span><br><span class=\"line\">        log.Printf(<span class=\"string\">\"Bucket %s has already created\\n\"</span>, bucketName)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err = minioClient.MakeBucket(bucketName, <span class=\"string\">\"cn-north-1\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err ！= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Printf(<span class=\"string\">\"Bucket %s created failed\\n\"</span>, bucketName)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>, err</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"将bucket设置为全局可读\"><a href=\"#将bucket设置为全局可读\" class=\"headerlink\" title=\"将bucket设置为全局可读\"></a>将bucket设置为全局可读</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MinioMakeBucketAllReadOnly</span><span class=\"params\">(bucketName <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;   </span><br><span class=\"line\"></span><br><span class=\"line\">    cli := MinioGetClient()</span><br><span class=\"line\"></span><br><span class=\"line\">    readOnlyPolicy := <span class=\"string\">`&#123;\"Version\": \"2012-10-17\",\"Statement\": [&#123;\"Action\": [\"s3:GetObject\"],\"Effect\": \"Allow\",\"Principal\": &#123;\"AWS\": [\"*\"]&#125;,\"Resource\": [\"arn:aws:s3:::`</span></span><br><span class=\"line\">    readOnlyPolicy += bucketName</span><br><span class=\"line\">    readOnlyPolicy += <span class=\"string\">`/*\"],\"Sid\": \"\"&#125;]&#125;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    err := minioClient.SetBucketPolicy(bucketName, readOnlyPolicy)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Println(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"上传图片\"><a href=\"#上传图片\" class=\"headerlink\" title=\"上传图片\"></a>上传图片</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MinioPutObject</span><span class=\"params\">(buckName <span class=\"keyword\">string</span>, filename <span class=\"keyword\">string</span>, reader io.Reader)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    _, err = MinioGetClient().PutObject(buckName, filename, reader, reader.Size(), minio.PutObjectOptions&#123;ContentType: <span class=\"string\">\"application/octet-stream\"</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很多时候我们是直接接受到字节流，然后把字节流传输到minio中，先把数据流转换成io流</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">byte2Reader</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">io</span>.<span class=\"title\">Reader</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes.NewReader(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"golang-minio-sdk\"><a href=\"#golang-minio-sdk\" class=\"headerlink\" title=\"golang minio sdk\"></a>golang minio sdk</h2><p>本篇主要是GoLang SDK基本使用 </p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><pre><code>go get -u github.com/minio/minio-go\n</code></pre><h5 id=\"连接minio\"><a href=\"#连接minio\" class=\"headerlink\" title=\"连接minio\"></a>连接minio</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"github.com/minio/minio-go\"</span></span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    minioHost = <span class=\"string\">\"127.0.0.1:9000\"</span></span><br><span class=\"line\">    minioAccessKeyID = <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">    minioSecretAccessKey = <span class=\"string\">\"123456\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MinioGetClient</span><span class=\"params\">()</span> *<span class=\"title\">minio</span>.<span class=\"title\">Client</span>, <span class=\"title\">err</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初使化 minio client对象。</span></span><br><span class=\"line\">    minioClient, err := minio.New(</span><br><span class=\"line\">        minioHost, minioAccessKeyID, minioSecretAccessKey, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatalln(err)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> minioClient, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建bucket\"><a href=\"#创建bucket\" class=\"headerlink\" title=\"创建bucket\"></a>创建bucket</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MinioMakeBucket</span><span class=\"params\">(bucketName <span class=\"keyword\">string</span>, readonly <span class=\"keyword\">bool</span>)</span> <span class=\"params\">(<span class=\"keyword\">bool</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建存储桶。</span></span><br><span class=\"line\">\tcli := MinioGetClient() <span class=\"comment\">//这个函数来自上面定义</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 先判断是否桶存在</span></span><br><span class=\"line\">    exists, err := cli.BucketExists(bucketName)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatalln(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> exists &#123;</span><br><span class=\"line\">        log.Printf(<span class=\"string\">\"Bucket %s has already created\\n\"</span>, bucketName)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err = minioClient.MakeBucket(bucketName, <span class=\"string\">\"cn-north-1\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err ！= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Printf(<span class=\"string\">\"Bucket %s created failed\\n\"</span>, bucketName)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>, err</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"将bucket设置为全局可读\"><a href=\"#将bucket设置为全局可读\" class=\"headerlink\" title=\"将bucket设置为全局可读\"></a>将bucket设置为全局可读</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MinioMakeBucketAllReadOnly</span><span class=\"params\">(bucketName <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;   </span><br><span class=\"line\"></span><br><span class=\"line\">    cli := MinioGetClient()</span><br><span class=\"line\"></span><br><span class=\"line\">    readOnlyPolicy := <span class=\"string\">`&#123;\"Version\": \"2012-10-17\",\"Statement\": [&#123;\"Action\": [\"s3:GetObject\"],\"Effect\": \"Allow\",\"Principal\": &#123;\"AWS\": [\"*\"]&#125;,\"Resource\": [\"arn:aws:s3:::`</span></span><br><span class=\"line\">    readOnlyPolicy += bucketName</span><br><span class=\"line\">    readOnlyPolicy += <span class=\"string\">`/*\"],\"Sid\": \"\"&#125;]&#125;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    err := minioClient.SetBucketPolicy(bucketName, readOnlyPolicy)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Println(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"上传图片\"><a href=\"#上传图片\" class=\"headerlink\" title=\"上传图片\"></a>上传图片</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MinioPutObject</span><span class=\"params\">(buckName <span class=\"keyword\">string</span>, filename <span class=\"keyword\">string</span>, reader io.Reader)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    _, err = MinioGetClient().PutObject(buckName, filename, reader, reader.Size(), minio.PutObjectOptions&#123;ContentType: <span class=\"string\">\"application/octet-stream\"</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很多时候我们是直接接受到字节流，然后把字节流传输到minio中，先把数据流转换成io流</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">    <span class=\"string\">\"io\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">byte2Reader</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">io</span>.<span class=\"title\">Reader</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes.NewReader(b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"go 字符串拼接","_content":"\n## go 字符串拼接\n\n### 常见方式\n\n- 字符串add操作：+\n- fmt.Sprintf\n- bytes.Buffer\n- strings.Builder\n\n### 四种方式性能测试\n\n```go\nfunc BenchmarkStringAdd(b *testing.B)  {\n    b.ResetTimer()\n    for i:=0;i<b.N;i++{\n        var s string\n        for j:=0;j<n;j++ {\n            s += strconv.Itoa(j)\n        }\n    }\n    b.StopTimer()\n}\n\nfunc BenchmarkStringBuilder(b *testing.B)  {\n    b.ResetTimer()\n    for i:=0;i<b.N;i++{\n        var s strings.Builder\n        for j:=0;j<n;j++ {\n            s.WriteString(strconv.Itoa(j))\n        }\n    }\n    b.StopTimer()\n}\n\nfunc BenchmarkStringByte(b *testing.B)  {\n    b.ResetTimer()\n    for i:=0;i<b.N;i++{\n        var s bytes.Buffer\n        for j:=0;j<n;j++ {\n            s.WriteString(strconv.Itoa(j))\n        }\n    }\n    b.StopTimer()\n}\n\nfunc BenchmarkStringFmt(b *testing.B)  {\n    b.ResetTimer()\n    for i:=0;i<b.N;i++{\n        var s string\n        for j:=0;j<n;j++ {\n            s += fmt.Sprintf(\"%s%s\", s, strconv.Itoa(j))\n        }\n    }\n    b.StopTimer()\n}\n```\n\n```\n go test -bench=.\n// 输出结果\nBenchmarkStringAdd-4             5000000               360 ns/op\nBenchmarkStringBuilder-4        10000000               141 ns/op\nBenchmarkStringByte-4           10000000               162 ns/op\nBenchmarkStringFmt-4              500000              2456 ns/op\nPASS\n\n```\n\n### 简要分析\n\n由于字符串是一个不可变对象，使用+号以及fmt方式，会造成大量的内存拷贝，尽可能的使用Buffer或者builder的方式去连接字符串。\n","source":"_posts/go/minio/strings_json.md","raw":"---\ntitle: go 字符串拼接\ntags:\n\t- go\n\t- 字符串\ncategories:\n\t- go\n    - go基础\n---\n\n## go 字符串拼接\n\n### 常见方式\n\n- 字符串add操作：+\n- fmt.Sprintf\n- bytes.Buffer\n- strings.Builder\n\n### 四种方式性能测试\n\n```go\nfunc BenchmarkStringAdd(b *testing.B)  {\n    b.ResetTimer()\n    for i:=0;i<b.N;i++{\n        var s string\n        for j:=0;j<n;j++ {\n            s += strconv.Itoa(j)\n        }\n    }\n    b.StopTimer()\n}\n\nfunc BenchmarkStringBuilder(b *testing.B)  {\n    b.ResetTimer()\n    for i:=0;i<b.N;i++{\n        var s strings.Builder\n        for j:=0;j<n;j++ {\n            s.WriteString(strconv.Itoa(j))\n        }\n    }\n    b.StopTimer()\n}\n\nfunc BenchmarkStringByte(b *testing.B)  {\n    b.ResetTimer()\n    for i:=0;i<b.N;i++{\n        var s bytes.Buffer\n        for j:=0;j<n;j++ {\n            s.WriteString(strconv.Itoa(j))\n        }\n    }\n    b.StopTimer()\n}\n\nfunc BenchmarkStringFmt(b *testing.B)  {\n    b.ResetTimer()\n    for i:=0;i<b.N;i++{\n        var s string\n        for j:=0;j<n;j++ {\n            s += fmt.Sprintf(\"%s%s\", s, strconv.Itoa(j))\n        }\n    }\n    b.StopTimer()\n}\n```\n\n```\n go test -bench=.\n// 输出结果\nBenchmarkStringAdd-4             5000000               360 ns/op\nBenchmarkStringBuilder-4        10000000               141 ns/op\nBenchmarkStringByte-4           10000000               162 ns/op\nBenchmarkStringFmt-4              500000              2456 ns/op\nPASS\n\n```\n\n### 简要分析\n\n由于字符串是一个不可变对象，使用+号以及fmt方式，会造成大量的内存拷贝，尽可能的使用Buffer或者builder的方式去连接字符串。\n","slug":"go/minio/strings_json","published":1,"date":"2020-06-30T15:19:24.615Z","updated":"2020-06-30T15:35:17.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckcgv2c12002wrlx3fd56xsp1","content":"<h2 id=\"go-字符串拼接\"><a href=\"#go-字符串拼接\" class=\"headerlink\" title=\"go 字符串拼接\"></a>go 字符串拼接</h2><h3 id=\"常见方式\"><a href=\"#常见方式\" class=\"headerlink\" title=\"常见方式\"></a>常见方式</h3><ul>\n<li>字符串add操作：+</li>\n<li>fmt.Sprintf</li>\n<li>bytes.Buffer</li>\n<li>strings.Builder</li>\n</ul>\n<h3 id=\"四种方式性能测试\"><a href=\"#四种方式性能测试\" class=\"headerlink\" title=\"四种方式性能测试\"></a>四种方式性能测试</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringAdd</span><span class=\"params\">(b *testing.B)</span></span>  &#123;</span><br><span class=\"line\">    b.ResetTimer()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;b.N;i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s <span class=\"keyword\">string</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j:=<span class=\"number\">0</span>;j&lt;n;j++ &#123;</span><br><span class=\"line\">            s += strconv.Itoa(j)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b.StopTimer()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringBuilder</span><span class=\"params\">(b *testing.B)</span></span>  &#123;</span><br><span class=\"line\">    b.ResetTimer()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;b.N;i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s strings.Builder</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j:=<span class=\"number\">0</span>;j&lt;n;j++ &#123;</span><br><span class=\"line\">            s.WriteString(strconv.Itoa(j))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b.StopTimer()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringByte</span><span class=\"params\">(b *testing.B)</span></span>  &#123;</span><br><span class=\"line\">    b.ResetTimer()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;b.N;i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s bytes.Buffer</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j:=<span class=\"number\">0</span>;j&lt;n;j++ &#123;</span><br><span class=\"line\">            s.WriteString(strconv.Itoa(j))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b.StopTimer()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringFmt</span><span class=\"params\">(b *testing.B)</span></span>  &#123;</span><br><span class=\"line\">    b.ResetTimer()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;b.N;i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s <span class=\"keyword\">string</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j:=<span class=\"number\">0</span>;j&lt;n;j++ &#123;</span><br><span class=\"line\">            s += fmt.Sprintf(<span class=\"string\">\"%s%s\"</span>, s, strconv.Itoa(j))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b.StopTimer()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> go test -bench=.</span><br><span class=\"line\">// 输出结果</span><br><span class=\"line\">BenchmarkStringAdd-4             5000000               360 ns/op</span><br><span class=\"line\">BenchmarkStringBuilder-4        10000000               141 ns/op</span><br><span class=\"line\">BenchmarkStringByte-4           10000000               162 ns/op</span><br><span class=\"line\">BenchmarkStringFmt-4              500000              2456 ns/op</span><br><span class=\"line\">PASS</span><br></pre></td></tr></table></figure>\n<h3 id=\"简要分析\"><a href=\"#简要分析\" class=\"headerlink\" title=\"简要分析\"></a>简要分析</h3><p>由于字符串是一个不可变对象，使用+号以及fmt方式，会造成大量的内存拷贝，尽可能的使用Buffer或者builder的方式去连接字符串。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"go-字符串拼接\"><a href=\"#go-字符串拼接\" class=\"headerlink\" title=\"go 字符串拼接\"></a>go 字符串拼接</h2><h3 id=\"常见方式\"><a href=\"#常见方式\" class=\"headerlink\" title=\"常见方式\"></a>常见方式</h3><ul>\n<li>字符串add操作：+</li>\n<li>fmt.Sprintf</li>\n<li>bytes.Buffer</li>\n<li>strings.Builder</li>\n</ul>\n<h3 id=\"四种方式性能测试\"><a href=\"#四种方式性能测试\" class=\"headerlink\" title=\"四种方式性能测试\"></a>四种方式性能测试</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringAdd</span><span class=\"params\">(b *testing.B)</span></span>  &#123;</span><br><span class=\"line\">    b.ResetTimer()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;b.N;i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s <span class=\"keyword\">string</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j:=<span class=\"number\">0</span>;j&lt;n;j++ &#123;</span><br><span class=\"line\">            s += strconv.Itoa(j)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b.StopTimer()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringBuilder</span><span class=\"params\">(b *testing.B)</span></span>  &#123;</span><br><span class=\"line\">    b.ResetTimer()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;b.N;i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s strings.Builder</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j:=<span class=\"number\">0</span>;j&lt;n;j++ &#123;</span><br><span class=\"line\">            s.WriteString(strconv.Itoa(j))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b.StopTimer()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringByte</span><span class=\"params\">(b *testing.B)</span></span>  &#123;</span><br><span class=\"line\">    b.ResetTimer()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;b.N;i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s bytes.Buffer</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j:=<span class=\"number\">0</span>;j&lt;n;j++ &#123;</span><br><span class=\"line\">            s.WriteString(strconv.Itoa(j))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b.StopTimer()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkStringFmt</span><span class=\"params\">(b *testing.B)</span></span>  &#123;</span><br><span class=\"line\">    b.ResetTimer()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;b.N;i++&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s <span class=\"keyword\">string</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j:=<span class=\"number\">0</span>;j&lt;n;j++ &#123;</span><br><span class=\"line\">            s += fmt.Sprintf(<span class=\"string\">\"%s%s\"</span>, s, strconv.Itoa(j))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b.StopTimer()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> go test -bench=.</span><br><span class=\"line\">// 输出结果</span><br><span class=\"line\">BenchmarkStringAdd-4             5000000               360 ns/op</span><br><span class=\"line\">BenchmarkStringBuilder-4        10000000               141 ns/op</span><br><span class=\"line\">BenchmarkStringByte-4           10000000               162 ns/op</span><br><span class=\"line\">BenchmarkStringFmt-4              500000              2456 ns/op</span><br><span class=\"line\">PASS</span><br></pre></td></tr></table></figure>\n<h3 id=\"简要分析\"><a href=\"#简要分析\" class=\"headerlink\" title=\"简要分析\"></a>简要分析</h3><p>由于字符串是一个不可变对象，使用+号以及fmt方式，会造成大量的内存拷贝，尽可能的使用Buffer或者builder的方式去连接字符串。</p>\n"}],"PostAsset":[{"_id":"source/_posts/log/kafka_to_es/connector.jpg","slug":"connector.jpg","post":"ckcgv2byy000xrlx3ydqui7lg","modified":1,"renderable":0},{"_id":"source/_posts/algorithm/shuffle/insert.jpg","post":"ckcgv2byf0003rlx31ohkbtt0","slug":"insert.jpg","modified":1,"renderable":1},{"_id":"source/_posts/algorithm/shuffle/select.jpg","post":"ckcgv2byf0003rlx31ohkbtt0","slug":"select.jpg","modified":1,"renderable":1},{"_id":"source/_posts/algorithm/shuffle/swap.jpg","post":"ckcgv2byf0003rlx31ohkbtt0","slug":"swap.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckcgv2byc0002rlx3u9ho99dg","category_id":"ckcgv2byh0004rlx3cln1923n","_id":"ckcgv2byp000drlx3rp5pw0mp"},{"post_id":"ckcgv2byf0003rlx31ohkbtt0","category_id":"ckcgv2bym0009rlx3y8qbg2sw","_id":"ckcgv2byt000krlx3nv59xot9"},{"post_id":"ckcgv2byp000grlx3xx9blhjo","category_id":"ckcgv2byp000erlx3o70lq3sc","_id":"ckcgv2bz4001brlx3fr7phpdj"},{"post_id":"ckcgv2byp000grlx3xx9blhjo","category_id":"ckcgv2bz10014rlx31b98lyrt","_id":"ckcgv2bz4001drlx3jhf51ccq"},{"post_id":"ckcgv2byr000irlx3svmqdimx","category_id":"ckcgv2byp000erlx3o70lq3sc","_id":"ckcgv2bz6001jrlx3adp4n05k"},{"post_id":"ckcgv2byr000irlx3svmqdimx","category_id":"ckcgv2bz10014rlx31b98lyrt","_id":"ckcgv2bz6001lrlx34l0p6cvu"},{"post_id":"ckcgv2byu000nrlx3ybxkws3n","category_id":"ckcgv2byp000erlx3o70lq3sc","_id":"ckcgv2bz6001orlx3fwwc95cj"},{"post_id":"ckcgv2byu000nrlx3ybxkws3n","category_id":"ckcgv2bz10014rlx31b98lyrt","_id":"ckcgv2bz7001qrlx3mlfopl8s"},{"post_id":"ckcgv2byk0007rlx3jun0oo0v","category_id":"ckcgv2byp000erlx3o70lq3sc","_id":"ckcgv2bz7001srlx3c6kjqzei"},{"post_id":"ckcgv2byk0007rlx3jun0oo0v","category_id":"ckcgv2bz10014rlx31b98lyrt","_id":"ckcgv2bz7001urlx3jo4vf949"},{"post_id":"ckcgv2byv000prlx3kap7swv3","category_id":"ckcgv2byp000erlx3o70lq3sc","_id":"ckcgv2bz8001vrlx3169z6p7v"},{"post_id":"ckcgv2byv000prlx3kap7swv3","category_id":"ckcgv2bz10014rlx31b98lyrt","_id":"ckcgv2bz8001xrlx3dn9by8op"},{"post_id":"ckcgv2byw000trlx3ptlbavae","category_id":"ckcgv2bz7001rrlx3gg99nzrk","_id":"ckcgv2bz90021rlx3tzky6aqx"},{"post_id":"ckcgv2byl0008rlx3g3l2jyfd","category_id":"ckcgv2byp000erlx3o70lq3sc","_id":"ckcgv2bz90025rlx3ukeb7075"},{"post_id":"ckcgv2byl0008rlx3g3l2jyfd","category_id":"ckcgv2bz10014rlx31b98lyrt","_id":"ckcgv2bz90028rlx3faucdwnl"},{"post_id":"ckcgv2byx000vrlx3vasuhqqw","category_id":"ckcgv2bz80020rlx3nvc8a668","_id":"ckcgv2bz9002arlx328vy6d8a"},{"post_id":"ckcgv2byy000xrlx3ydqui7lg","category_id":"ckcgv2bz90026rlx354ny749m","_id":"ckcgv2bza002erlx3w5vg3t5f"},{"post_id":"ckcgv2bym000brlx36b8uhkye","category_id":"ckcgv2byp000erlx3o70lq3sc","_id":"ckcgv2bzb002hrlx3vtjgkxfs"},{"post_id":"ckcgv2bym000brlx36b8uhkye","category_id":"ckcgv2bz10014rlx31b98lyrt","_id":"ckcgv2bzb002irlx3ll6bvsnc"},{"post_id":"ckcgv2byo000crlx3kibnys41","category_id":"ckcgv2byp000erlx3o70lq3sc","_id":"ckcgv2bzb002jrlx352rkymjb"},{"post_id":"ckcgv2byo000crlx3kibnys41","category_id":"ckcgv2bz10014rlx31b98lyrt","_id":"ckcgv2bzc002lrlx3l21lstil"},{"post_id":"ckcgv2byi0006rlx3wii7qqyw","category_id":"ckcgv2byp000erlx3o70lq3sc","_id":"ckcgv2bzc002nrlx3id89ky0c"},{"post_id":"ckcgv2byi0006rlx3wii7qqyw","category_id":"ckcgv2bz10014rlx31b98lyrt","_id":"ckcgv2bzc002prlx3vy0rllrj"},{"post_id":"ckcgv2byi0006rlx3wii7qqyw","category_id":"ckcgv2bzb002grlx3529a3fz2","_id":"ckcgv2bzc002rrlx3mhpp84rg"},{"post_id":"ckcgv2c10002srlx38aetza7o","category_id":"ckcgv2c12002urlx33u0a9yb8","_id":"ckcgv2c170030rlx323rj0j4z"},{"post_id":"ckcgv2c12002wrlx3fd56xsp1","category_id":"ckcgv2c170031rlx3pu0ftd62","_id":"ckcgv2c180037rlx3kzk56ahb"},{"post_id":"ckcgv2c11002trlx37m3lyrme","category_id":"ckcgv2c13002xrlx3bck7vwlv","_id":"ckcgv2c180039rlx3n37sd7o1"},{"post_id":"ckcgv2c11002trlx37m3lyrme","category_id":"ckcgv2c170033rlx3fajg3gkg","_id":"ckcgv2c18003brlx3vkm10a9h"}],"PostTag":[{"post_id":"ckcgv2byc0002rlx3u9ho99dg","tag_id":"ckcgv2byi0005rlx355y3v19e","_id":"ckcgv2byq000hrlx3pdy6y7q3"},{"post_id":"ckcgv2byc0002rlx3u9ho99dg","tag_id":"ckcgv2bym000arlx3szn0r8b6","_id":"ckcgv2bys000jrlx3sgt26u5v"},{"post_id":"ckcgv2byf0003rlx31ohkbtt0","tag_id":"ckcgv2byp000frlx3grp646sb","_id":"ckcgv2byv000orlx3yh3ii338"},{"post_id":"ckcgv2byu000nrlx3ybxkws3n","tag_id":"ckcgv2byt000mrlx3ob7m4yv8","_id":"ckcgv2byw000rrlx3rl4r8cbm"},{"post_id":"ckcgv2byv000prlx3kap7swv3","tag_id":"ckcgv2byt000mrlx3ob7m4yv8","_id":"ckcgv2byx000urlx3mgl08ts5"},{"post_id":"ckcgv2byi0006rlx3wii7qqyw","tag_id":"ckcgv2byt000mrlx3ob7m4yv8","_id":"ckcgv2byz000zrlx3sq5c8bwb"},{"post_id":"ckcgv2byi0006rlx3wii7qqyw","tag_id":"ckcgv2byw000srlx3y3gbqmzg","_id":"ckcgv2bz00011rlx3z0ovgdoq"},{"post_id":"ckcgv2byk0007rlx3jun0oo0v","tag_id":"ckcgv2byt000mrlx3ob7m4yv8","_id":"ckcgv2bz00013rlx3acr9i0x9"},{"post_id":"ckcgv2byl0008rlx3g3l2jyfd","tag_id":"ckcgv2byt000mrlx3ob7m4yv8","_id":"ckcgv2bz20016rlx3yv0qs6o7"},{"post_id":"ckcgv2bym000brlx36b8uhkye","tag_id":"ckcgv2byt000mrlx3ob7m4yv8","_id":"ckcgv2bz30019rlx3mlz5sv4f"},{"post_id":"ckcgv2byo000crlx3kibnys41","tag_id":"ckcgv2byt000mrlx3ob7m4yv8","_id":"ckcgv2bz4001erlx3a9fmievv"},{"post_id":"ckcgv2byp000grlx3xx9blhjo","tag_id":"ckcgv2byt000mrlx3ob7m4yv8","_id":"ckcgv2bz5001hrlx38afy13g2"},{"post_id":"ckcgv2byr000irlx3svmqdimx","tag_id":"ckcgv2byt000mrlx3ob7m4yv8","_id":"ckcgv2bz6001mrlx3regyrz0t"},{"post_id":"ckcgv2byw000trlx3ptlbavae","tag_id":"ckcgv2bz6001krlx336f4fnw6","_id":"ckcgv2bz8001zrlx3gumc9uaz"},{"post_id":"ckcgv2byw000trlx3ptlbavae","tag_id":"ckcgv2bz7001prlx341yreeir","_id":"ckcgv2bz90022rlx3q0ekdc8v"},{"post_id":"ckcgv2byw000trlx3ptlbavae","tag_id":"ckcgv2bz7001trlx3n74iteli","_id":"ckcgv2bz90024rlx3szashlcm"},{"post_id":"ckcgv2byx000vrlx3vasuhqqw","tag_id":"ckcgv2bz8001yrlx3m8u9lyj0","_id":"ckcgv2bz90027rlx3pqwcpke6"},{"post_id":"ckcgv2byy000xrlx3ydqui7lg","tag_id":"ckcgv2bz90023rlx321lmdmum","_id":"ckcgv2bzc002krlx307flz6vh"},{"post_id":"ckcgv2byy000xrlx3ydqui7lg","tag_id":"ckcgv2bz90029rlx38gmkfin2","_id":"ckcgv2bzc002mrlx3tcpzjbto"},{"post_id":"ckcgv2byy000xrlx3ydqui7lg","tag_id":"ckcgv2bza002crlx32tdukten","_id":"ckcgv2bzc002orlx3m4gtdbew"},{"post_id":"ckcgv2byy000xrlx3ydqui7lg","tag_id":"ckcgv2bzb002frlx3jfxfnvi9","_id":"ckcgv2bzc002qrlx3v7joode5"},{"post_id":"ckcgv2c10002srlx38aetza7o","tag_id":"ckcgv2c12002vrlx3k8mquagz","_id":"ckcgv2c16002zrlx3cab7wldm"},{"post_id":"ckcgv2c11002trlx37m3lyrme","tag_id":"ckcgv2c13002yrlx3wzfj1ino","_id":"ckcgv2c180035rlx3me4aqkko"},{"post_id":"ckcgv2c11002trlx37m3lyrme","tag_id":"ckcgv2c170032rlx3uc5yo1rj","_id":"ckcgv2c180036rlx3z1n6fi68"},{"post_id":"ckcgv2c12002wrlx3fd56xsp1","tag_id":"ckcgv2c13002yrlx3wzfj1ino","_id":"ckcgv2c18003arlx3fj9gr089"},{"post_id":"ckcgv2c12002wrlx3fd56xsp1","tag_id":"ckcgv2c180038rlx30e914e0m","_id":"ckcgv2c18003crlx33lakrvlh"}],"Tag":[{"name":"airflow","_id":"ckcgv2byi0005rlx355y3v19e"},{"name":"任务调度","_id":"ckcgv2bym000arlx3szn0r8b6"},{"name":"随机","_id":"ckcgv2byp000frlx3grp646sb"},{"name":"leetcode","_id":"ckcgv2byt000mrlx3ob7m4yv8"},{"name":"MySQL","_id":"ckcgv2byw000srlx3y3gbqmzg"},{"name":"redis","_id":"ckcgv2bz6001krlx336f4fnw6"},{"name":"分布式","_id":"ckcgv2bz7001prlx341yreeir"},{"name":"集群","_id":"ckcgv2bz7001trlx3n74iteli"},{"name":"ssh","_id":"ckcgv2bz8001yrlx3m8u9lyj0"},{"name":"kafka","_id":"ckcgv2bz90023rlx321lmdmum"},{"name":"日志储存","_id":"ckcgv2bz90029rlx38gmkfin2"},{"name":"elasticsearch","_id":"ckcgv2bza002crlx32tdukten"},{"name":"logstash","_id":"ckcgv2bzb002frlx3jfxfnvi9"},{"name":"日记","_id":"ckcgv2c12002vrlx3k8mquagz"},{"name":"go","_id":"ckcgv2c13002yrlx3wzfj1ino"},{"name":"minio","_id":"ckcgv2c170032rlx3uc5yo1rj"},{"name":"字符串","_id":"ckcgv2c180038rlx30e914e0m"}]}}